// Generated by CoffeeScript 1.10.0
(function() {
  var coding, debug, program,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('coding:CmdBase');

  program = require("commander");

  coding = require("../../Node-Coding");

  module.exports.CmdBase = (function() {
    function CmdBase(opts) {
      this.opts = opts;
      this.init = bind(this.init, this);
      this.handleOptions = bind(this.handleOptions, this);
      debug("constructor()");
      this.program = program;
      this.coding = new coding(this.opts);
      this.handleOptions();
      this.init();
    }

    CmdBase.prototype.handleOptions = function() {
      return debug("handleOptions()");
    };

    CmdBase.prototype.init = function() {
      debug("_init()");
      this.cmd = this;
      this.debug = require('debug')("coding:Models:" + this.constructor.name);
      this.oauth = require('./models/OAuth')(this.cmd);
      this.users = require('./models/Users')(this.cmd);
      this.projects = require('./models/Projects')(this.cmd);
      this.tasks = require('./models/Tasks')(this.cmd);
      this.tweets = require('./models/Tweets')(this.cmd);
      this.files = require('./models/Files')(this.cmd);
      this.depots = require('./models/Depots')(this.cmd);
      this.blobs = require('./models/Blobs')(this.cmd);
      this.branchs = require('./models/Branchs')(this.cmd);
      this.commits = require('./models/Commits')(this.cmd);
      this.historys = require('./models/Historys')(this.cmd);
      this.repoFiles = require('./models/RepoFiles')(this.cmd);
      this.mergeRequests = require('./models/MergeRequests')(this.cmd);
      this.pullRequests = require('./models/PullRequests')(this.cmd);
      this.tags = require('./models/Tags')(this.cmd);
      this.trees = require('./models/Trees')(this.cmd);
      this.projectTopics = require('./models/ProjectTopics')(this.cmd);
      this.keys = require('./models/Keys')(this.cmd);
      this.program.parse(process.argv);
      if (process.argv.length === 2) {
        return this.program.help();
      }
    };

    return CmdBase;

  })();

}).call(this);
