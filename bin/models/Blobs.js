// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Blobs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Blobs = (function(superClass) {
    extend(Blobs, superClass);

    function Blobs() {
      this.get = bind(this.get, this);
      this.init = bind(this.init, this);
      return Blobs.__super__.constructor.apply(this, arguments);
    }

    Blobs.prototype.init = function() {
      this.debug("init()");
      return this.program.command("get").description("获取 blob")["arguments"]("<user> <project> <blob>").action(this.get);
    };


    /*
    
     method            : get
     summary         : get
     description    : 获取 blob
     header         : userAgent,accept
     path            : user,project,blob
     body            : currentApp,ref,path
     */

    Blobs.prototype.get = function(user, project, blob) {
      this.debug("Blobs::get()");
      return this.prompt.get([
        {
          "name": "userAgent",
          "description": "Enter userAgent",
          "type": "string",
          "required": false
        }, {
          "name": "accept",
          "description": "Enter accept",
          "type": "string",
          "required": false
        }, {
          "name": "currentApp",
          "description": "Enter currentApp",
          "type": "string",
          "required": false
        }, {
          "name": "ref",
          "description": "Enter ref",
          "type": "string",
          "required": false
        }, {
          "name": "path",
          "description": "Enter path",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, ["userAgent", "accept"], [], ["currentApp", "ref", "path"], []);
          return _this.coding.blob.get(user, project, blob, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return Blobs;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Blobs(cmd);
  };

}).call(this);
