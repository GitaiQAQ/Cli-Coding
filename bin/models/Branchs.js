// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Branchs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Branchs = (function(superClass) {
    extend(Branchs, superClass);

    function Branchs() {
      this.removeProtectedBranchMember = bind(this.removeProtectedBranchMember, this);
      this.listProtectedBranchMember = bind(this.listProtectedBranchMember, this);
      this.enableProtectedBranch = bind(this.enableProtectedBranch, this);
      this.disableProtectedBranch = bind(this.disableProtectedBranch, this);
      this.addProtectedBranchMember = bind(this.addProtectedBranchMember, this);
      this.deleteBranch = bind(this.deleteBranch, this);
      this.createBranch = bind(this.createBranch, this);
      this.list = bind(this.list, this);
      this.setDefaultBranch = bind(this.setDefaultBranch, this);
      this.init = bind(this.init, this);
      return Branchs.__super__.constructor.apply(this, arguments);
    }

    Branchs.prototype.init = function() {
      this.debug("init()");
      this.program.command("setDefaultBranch").description("设置默认分支")["arguments"]('<user> <project>').action(this.setDefaultBranch);
      this.program.command("list").description("分页显示分支列表")["arguments"]('<user> <project>').action(this.list);
      this.program.command("createBranch").description("新建分支")["arguments"]('<user> <project>').action(this.createBranch);
      this.program.command("deleteBranch").description("删除分支")["arguments"]('<user> <project>').action(this.deleteBranch);
      this.program.command("addProtectedBranchMember").description("添加保护分支成员")["arguments"]('<user> <project>').action(this.addProtectedBranchMember);
      this.program.command("disableProtectedBranch").description("取消保护分支")["arguments"]('<user> <project>').action(this.disableProtectedBranch);
      this.program.command("enableProtectedBranch").description("设置保护分支")["arguments"]('<user> <project>').action(this.enableProtectedBranch);
      this.program.command("listProtectedBranchMember").description("列出保护分支中的成员")["arguments"]('<user> <project>').action(this.listProtectedBranchMember);
      return this.program.command("removeProtectedBranchMember").description("删除保护分支成员")["arguments"]('<user> <project>').action(this.removeProtectedBranchMember);
    };


    /*
    
     operationId  : setDefaultBranch
     description  : 设置默认分支
     args     	: user,project
     params 		: default_branch,default_branch,
     */

    Branchs.prototype.setDefaultBranch = function(user, project) {
      this.debug("setDefaultBranch()");
      return this.coding.branchs.setDefaultBranch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : list
     description  : 分页显示分支列表
     args     	: user,project
     params 		: page,pageSize,page,pageSize,
     */

    Branchs.prototype.list = function(user, project) {
      this.debug("list()");
      return this.coding.branchs.list(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : createBranch
     description  : 新建分支
     args     	: user,project
     params 		: branch_name,start_point,branch_name,start_point,
     */

    Branchs.prototype.createBranch = function(user, project) {
      this.debug("createBranch()");
      return this.coding.branchs.createBranch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : deleteBranch
     description  : 删除分支
     args     	: user,project
     params 		: branch_name,branch_name,
     */

    Branchs.prototype.deleteBranch = function(user, project) {
      this.debug("deleteBranch()");
      return this.coding.branchs.deleteBranch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : addProtectedBranchMember
     description  : 添加保护分支成员
     args     	: user,project
     params 		: branch_name,target_global_key,branch_name,target_global_key,
     */

    Branchs.prototype.addProtectedBranchMember = function(user, project) {
      this.debug("addProtectedBranchMember()");
      return this.coding.branchs.addProtectedBranchMember(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : disableProtectedBranch
     description  : 取消保护分支
     args     	: user,project
     params 		: branch_name,branch_name,
     */

    Branchs.prototype.disableProtectedBranch = function(user, project) {
      this.debug("disableProtectedBranch()");
      return this.coding.branchs.disableProtectedBranch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : enableProtectedBranch
     description  : 设置保护分支
     args     	: user,project
     params 		: branch_name,branch_name,
     */

    Branchs.prototype.enableProtectedBranch = function(user, project) {
      this.debug("enableProtectedBranch()");
      return this.coding.branchs.enableProtectedBranch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listProtectedBranchMember
     description  : 列出保护分支中的成员
     args     	: user,project
     params 		: branch_name,branch_name,
     */

    Branchs.prototype.listProtectedBranchMember = function(user, project) {
      this.debug("listProtectedBranchMember()");
      return this.coding.branchs.listProtectedBranchMember(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : removeProtectedBranchMember
     description  : 删除保护分支成员
     args     	: user,project
     params 		: branch_name,target_global_key,branch_name,target_global_key,
     */

    Branchs.prototype.removeProtectedBranchMember = function(user, project) {
      this.debug("removeProtectedBranchMember()");
      return this.coding.branchs.removeProtectedBranchMember(user, project, params, function(data) {
        return console.log(data);
      });
    };

    return Branchs;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Branchs(cmd);
  };

}).call(this);
