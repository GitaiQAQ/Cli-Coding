// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Depots,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Depots = (function(superClass) {
    extend(Depots, superClass);

    function Depots() {
      this.initDepot = bind(this.initDepot, this);
      this.importRepo = bind(this.importRepo, this);
      this.listWebHook = bind(this.listWebHook, this);
      this.getWebHook = bind(this.getWebHook, this);
      this.createWebHook = bind(this.createWebHook, this);
      this.forks = bind(this.forks, this);
      this.fork = bind(this.fork, this);
      this.index = bind(this.index, this);
      this.init = bind(this.init, this);
      return Depots.__super__.constructor.apply(this, arguments);
    }

    Depots.prototype.init = function() {
      this.debug("init()");
      this.program.command("index").description("获取仓库信息")["arguments"]('<user> <project>').action(this.index);
      this.program.command("fork").description("fork")["arguments"]('<user> <project>').action(this.fork);
      this.program.command("forks").description("项目被fork的列表")["arguments"]('<user> <project>').action(this.forks);
      this.program.command("createWebHook").description("创建 webhook")["arguments"]('<user> <project>').action(this.createWebHook);
      this.program.command("getWebHook").description("获取 webhook")["arguments"]('<user> <project> <id>').action(this.getWebHook);
      this.program.command("listWebHook").description("列出项目设置的 webhook")["arguments"]('<user> <project>').action(this.listWebHook);
      this.program.command("importRepo").description("导入仓库")["arguments"]('<user> <project>').action(this.importRepo);
      return this.program.command("initDepot").description("初始化仓库")["arguments"]('<user> <project>').action(this.initDepot);
    };


    /*
    
     operationId  : index
     description  : 获取仓库信息
     args     	: user,project
     params 		:
     */

    Depots.prototype.index = function(user, project) {
      this.debug("index()");
      return this.coding.depots.index(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : fork
     description  : fork
     args     	: user,project
     params 		:
     */

    Depots.prototype.fork = function(user, project) {
      this.debug("fork()");
      return this.coding.depots.fork(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : forks
     description  : 项目被fork的列表
     args     	: user,project
     params 		:
     */

    Depots.prototype.forks = function(user, project) {
      this.debug("forks()");
      return this.coding.depots.forks(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : createWebHook
     description  : 创建 webhook
     args     	: user,project
     params 		: hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task,hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task,
     */

    Depots.prototype.createWebHook = function(user, project) {
      this.debug("createWebHook()");
      return this.coding.depots.createWebHook(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getWebHook
     description  : 获取 webhook
     args     	: user,project,id
     params 		:
     */

    Depots.prototype.getWebHook = function(user, project, id) {
      this.debug("getWebHook()");
      return this.coding.depots.getWebHook(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listWebHook
     description  : 列出项目设置的 webhook
     args     	: user,project
     params 		:
     */

    Depots.prototype.listWebHook = function(user, project) {
      this.debug("listWebHook()");
      return this.coding.depots.listWebHook(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : importRepo
     description  : 导入仓库
     args     	: user,project
     params 		: origin_url,vcs_type,origin_url,vcs_type,
     */

    Depots.prototype.importRepo = function(user, project) {
      this.debug("importRepo()");
      return this.coding.depots.importRepo(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : initDepot
     description  : 初始化仓库
     args     	: user,project
     params 		: type,gitReadmeEnabled,gitIgnore,gitLicense,importFrom,vcsType,type,gitReadmeEnabled,gitIgnore,gitLicense,importFrom,vcsType,
     */

    Depots.prototype.initDepot = function(user, project) {
      this.debug("initDepot()");
      return this.coding.depots.initDepot(user, project, params, function(data) {
        return console.log(data);
      });
    };

    return Depots;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Depots(cmd);
  };

}).call(this);
