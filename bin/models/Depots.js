// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Depots,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Depots = (function(superClass) {
    extend(Depots, superClass);

    function Depots() {
      this.initDepot = bind(this.initDepot, this);
      this.importRepo = bind(this.importRepo, this);
      this.importRepo = bind(this.importRepo, this);
      this.list = bind(this.list, this);
      this.deleteWebhook = bind(this.deleteWebhook, this);
      this.updateWebhook = bind(this.updateWebhook, this);
      this.getWebhook = bind(this.getWebhook, this);
      this.createWebhook = bind(this.createWebhook, this);
      this.forkList = bind(this.forkList, this);
      this.fork = bind(this.fork, this);
      this.get = bind(this.get, this);
      this.init = bind(this.init, this);
      return Depots.__super__.constructor.apply(this, arguments);
    }

    Depots.prototype.init = function() {
      this.debug("init()");
      this.program.command("get").description("获取仓库信息")["arguments"]("<user> <project>").action(this.get);
      this.program.command("fork").description("fork")["arguments"]("<user> <project>").action(this.fork);
      this.program.command("forkList").description("项目被fork的列表")["arguments"]("<user> <project>").action(this.forkList);
      this.program.command("createWebhook").description("创建 webhook")["arguments"]("<user> <project>").action(this.createWebhook);
      this.program.command("getWebhook").description("获取 webhook")["arguments"]("<user> <project> <id>").action(this.getWebhook);
      this.program.command("updateWebhook").description("编辑 webhook")["arguments"]("<user> <project> <id>").action(this.updateWebhook);
      this.program.command("deleteWebhook").description("删除 webhook")["arguments"]("<user> <project> <id>").action(this.deleteWebhook);
      this.program.command("list").description("列出项目设置的 webhook")["arguments"]("<user> <project>").action(this.list);
      this.program.command("importRepo").description("导入仓库")["arguments"]("<user> <project>").action(this.importRepo);
      this.program.command("importRepo").description("导入仓库")["arguments"]("<user> <project>").action(this.importRepo);
      return this.program.command("initDepot").description("初始化仓库")["arguments"]("<user> <project>").action(this.initDepot);
    };


    /*
    
     method            : get
     summary         : get
     description    : 获取仓库信息
     path            : user,project
     */

    Depots.prototype.get = function(user, project) {
      this.debug("Depots::get()");
      return this.coding.depot.get(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : fork
     description    : fork
     path            : user,project
     */

    Depots.prototype.fork = function(user, project) {
      this.debug("Depots::fork()");
      return this.coding.depot.fork(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : forkList
     description    : 项目被fork的列表
     path            : user,project
     */

    Depots.prototype.forkList = function(user, project) {
      this.debug("Depots::forkList()");
      return this.coding.depot.forkList(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : createWebhook
     description    : 创建 webhook
     path            : user,project
     query            : hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task
     */

    Depots.prototype.createWebhook = function(user, project) {
      this.debug("Depots::createWebhook()");
      return this.prompt.get([
        {
          "name": "hook_url",
          "description": "Enter hook_url",
          "type": "string",
          "required": false
        }, {
          "name": "token",
          "description": "Enter token",
          "type": "string",
          "required": false
        }, {
          "name": "type_push",
          "description": "Enter type_push",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_mr_pr",
          "description": "Enter type_mr_pr",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_topic",
          "description": "Enter type_topic",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_member",
          "description": "Enter type_member",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_comment",
          "description": "Enter type_comment",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_document",
          "description": "Enter type_document",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_watch",
          "description": "Enter type_watch",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_star",
          "description": "Enter type_star",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_task",
          "description": "Enter type_task",
          "type": "boolean",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.depot.createWebhook(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : getWebhook
     description    : 获取 webhook
     path            : user,project,id
     */

    Depots.prototype.getWebhook = function(user, project, id) {
      this.debug("Depots::getWebhook()");
      return this.coding.depot.getWebhook(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : updateWebhook
     description    : 编辑 webhook
     path            : user,project,id
     query            : hook_url,token,type_push,type_mr_pr,type_topic,type_member,type_comment,type_document,type_watch,type_star,type_task
     */

    Depots.prototype.updateWebhook = function(user, project, id) {
      this.debug("Depots::updateWebhook()");
      return this.prompt.get([
        {
          "name": "hook_url",
          "description": "Enter hook_url",
          "type": "string",
          "required": false
        }, {
          "name": "token",
          "description": "Enter token",
          "type": "string",
          "required": false
        }, {
          "name": "type_push",
          "description": "Enter type_push",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_mr_pr",
          "description": "Enter type_mr_pr",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_topic",
          "description": "Enter type_topic",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_member",
          "description": "Enter type_member",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_comment",
          "description": "Enter type_comment",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_document",
          "description": "Enter type_document",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_watch",
          "description": "Enter type_watch",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_star",
          "description": "Enter type_star",
          "type": "boolean",
          "required": false
        }, {
          "name": "type_task",
          "description": "Enter type_task",
          "type": "boolean",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.depot.updateWebhook(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : deleteWebhook
     description    : 删除 webhook
     path            : user,project,id
     */

    Depots.prototype.deleteWebhook = function(user, project, id) {
      this.debug("Depots::deleteWebhook()");
      return this.coding.depot.deleteWebhook(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出项目设置的 webhook
     path            : user,project
     */

    Depots.prototype.list = function(user, project) {
      this.debug("Depots::list()");
      return this.coding.depot.list(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : importRepo
     description    : 导入仓库
     path            : user,project
     query            : origin_url,vcs_type
     */

    Depots.prototype.importRepo = function(user, project) {
      this.debug("Depots::importRepo()");
      return this.prompt.get([
        {
          "name": "origin_url",
          "description": "Enter origin_url",
          "type": "string",
          "required": true
        }, {
          "name": "vcs_type",
          "description": "Enter vcs_type",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.depot.importRepo(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : importRepo
     description    : 导入仓库
     path            : user,project
     query            : origin_url,vcs_type
     */

    Depots.prototype.importRepo = function(user, project) {
      this.debug("Depots::importRepo()");
      return this.prompt.get([
        {
          "name": "origin_url",
          "description": "Enter origin_url",
          "type": "string",
          "required": true
        }, {
          "name": "vcs_type",
          "description": "Enter vcs_type",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.depot.importRepo(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : initDepot
     description    : 初始化仓库
     path            : user,project
     query            : type,gitReadmeEnabled,gitIgnore,gitLicense,importFrom,vcsType
     */

    Depots.prototype.initDepot = function(user, project) {
      this.debug("Depots::initDepot()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "gitReadmeEnabled",
          "description": "Enter gitReadmeEnabled",
          "type": "string",
          "required": false
        }, {
          "name": "gitIgnore",
          "description": "Enter gitIgnore",
          "type": "string",
          "required": false
        }, {
          "name": "gitLicense",
          "description": "Enter gitLicense",
          "type": "string",
          "required": false
        }, {
          "name": "importFrom",
          "description": "Enter importFrom",
          "type": "string",
          "required": false
        }, {
          "name": "vcsType",
          "description": "Enter vcsType",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.depot.initDepot(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return Depots;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Depots(cmd);
  };

}).call(this);
