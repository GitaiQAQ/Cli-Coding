// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Files,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Files = (function(superClass) {
    extend(Files, superClass);

    function Files() {
      this.count = bind(this.count, this);
      this.folders = bind(this.folders, this);
      this.folders = bind(this.folders, this);
      this.files = bind(this.files, this);
      this.renameFolder = bind(this.renameFolder, this);
      this.move = bind(this.move, this);
      this.mkdir = bind(this.mkdir, this);
      this.mkdir = bind(this.mkdir, this);
      this.history = bind(this.history, this);
      this.create = bind(this.create, this);
      this.updateFileRemark = bind(this.updateFileRemark, this);
      this.preview = bind(this.preview, this);
      this.view = bind(this.view, this);
      this.edit = bind(this.edit, this);
      this.download = bind(this.download, this);
      this.download = bind(this.download, this);
      this.upload = bind(this.upload, this);
      this.download = bind(this.download, this);
      this.history = bind(this.history, this);
      this.view = bind(this.view, this);
      this.uploadNewVersion = bind(this.uploadNewVersion, this);
      this.checkExisted = bind(this.checkExisted, this);
      this.init = bind(this.init, this);
      return Files.__super__.constructor.apply(this, arguments);
    }

    Files.prototype.init = function() {
      this.debug("init()");
      this.program.command("checkExisted").description("检查目录下是否有同名的文件")["arguments"]("<user> <project> <dir>").action(this.checkExisted);
      this.program.command("uploadNewVersion").description("上传文件新版本")["arguments"]("<user> <project>").action(this.uploadNewVersion);
      this.program.command("view").description("删除文件")["arguments"]("<user> <project>").action(this.view);
      this.program.command("history").description("删除文件历史")["arguments"]("<user> <project> <id>").action(this.history);
      this.program.command("download").description("下载历史文件版本")["arguments"]("<user> <project> <id>").action(this.download);
      this.program.command("upload").description("上传私有项目的图片")["arguments"]("<user> <project>").action(this.upload);
      this.program.command("download").description("文件下载")["arguments"]("<user> <project> <fileId>").action(this.download);
      this.program.command("download").description("文件下载URL")["arguments"]("<user> <project> <fileId>").action(this.download);
      this.program.command("edit").description("编辑文件")["arguments"]("<user> <project> <fileId>").action(this.edit);
      this.program.command("view").description("查看文件")["arguments"]("<user> <project> <fileId>").action(this.view);
      this.program.command("preview").description("图片预览")["arguments"]("<user> <project> <fileId>").action(this.preview);
      this.program.command("updateFileRemark").description("修改历史版本备注")["arguments"]("<user> <project> <file_id> <history_id>").action(this.updateFileRemark);
      this.program.command("create").description("创建文件")["arguments"]("<user> <project> <folderId>").action(this.create);
      this.program.command("history").description("文件历史")["arguments"]("<user> <project> <id>").action(this.history);
      this.program.command("mkdir").description("创建文件夹")["arguments"]("<user> <project>").action(this.mkdir);
      this.program.command("mkdir").description("删除文件夹")["arguments"]("<user> <project>").action(this.mkdir);
      this.program.command("move").description("移动文件")["arguments"]("<user> <project> <dirId>").action(this.move);
      this.program.command("renameFolder").description("重命名文件夹")["arguments"]("<user> <project> <dir>").action(this.renameFolder);
      this.program.command("files").description("列出某目录下的文件")["arguments"]("<user> <project> <dir>").action(this.files);
      this.program.command("folders").description("列出所有一级目录")["arguments"]("<user> <project>").action(this.folders);
      this.program.command("folders").description("列出所有目录")["arguments"]("<user> <project>").action(this.folders);
      return this.program.command("count").description("获取文件夹的文件数")["arguments"]("<user> <project>").action(this.count);
    };


    /*
    
     method            : get
     summary         : checkExisted
     description    : 检查目录下是否有同名的文件
     path            : user,project,dir
     body            : names
     */

    Files.prototype.checkExisted = function(user, project, dir) {
      this.debug("Files::checkExisted()");
      return this.prompt.get([
        {
          "name": "names",
          "description": "Enter names",
          "type": "array",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], [], ["names"], []);
          return _this.coding.file.checkExisted(user, project, dir, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : uploadNewVersion
     description    : 上传文件新版本
     path            : user,project
     */

    Files.prototype.uploadNewVersion = function(user, project) {
      this.debug("Files::uploadNewVersion()");
      return this.coding.file.uploadNewVersion(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : view
     description    : 删除文件
     path            : user,project
     body            : fileIds
     */

    Files.prototype.view = function(user, project) {
      this.debug("Files::view()");
      return this.prompt.get([
        {
          "name": "fileIds",
          "description": "Enter fileIds",
          "type": "array",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], [], ["fileIds"], []);
          return _this.coding.file.view(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : history
     description    : 删除文件历史
     path            : user,project,id
     */

    Files.prototype.history = function(user, project, id) {
      this.debug("Files::history()");
      return this.coding.file.history(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : download
     description    : 下载历史文件版本
     path            : user,project,id
     */

    Files.prototype.download = function(user, project, id) {
      this.debug("Files::download()");
      return this.coding.file.download(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : upload
     description    : 上传私有项目的图片
     path            : user,project
     */

    Files.prototype.upload = function(user, project) {
      this.debug("Files::upload()");
      return this.coding.file.upload(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : download
     description    : 文件下载
     path            : user,project,fileId
     */

    Files.prototype.download = function(user, project, fileId) {
      this.debug("Files::download()");
      return this.coding.file.download(user, project, fileId, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : download
     description    : 文件下载URL
     path            : user,project,fileId
     */

    Files.prototype.download = function(user, project, fileId) {
      this.debug("Files::download()");
      return this.coding.file.download(user, project, fileId, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : edit
     description    : 编辑文件
     path            : user,project,fileId
     query            : name,content,fileId
     */

    Files.prototype.edit = function(user, project, fileId) {
      this.debug("Files::edit()");
      return this.prompt.get([
        {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }, {
          "name": "fileId",
          "description": "Enter fileId",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["name", "content", "fileId"], [], []);
          return _this.coding.file.edit(user, project, fileId, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : view
     description    : 查看文件
     path            : user,project,fileId
     query            : type,width,height,flag
     */

    Files.prototype.view = function(user, project, fileId) {
      this.debug("Files::view()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }, {
          "name": "width",
          "description": "Enter width",
          "type": "integer",
          "required": false
        }, {
          "name": "height",
          "description": "Enter height",
          "type": "integer",
          "required": false
        }, {
          "name": "flag",
          "description": "Enter flag",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "width", "height", "flag"], [], []);
          return _this.coding.file.view(user, project, fileId, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : preview
     description    : 图片预览
     path            : user,project,fileId
     query            : type,width,height
     */

    Files.prototype.preview = function(user, project, fileId) {
      this.debug("Files::preview()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }, {
          "name": "width",
          "description": "Enter width",
          "type": "integer",
          "required": false
        }, {
          "name": "height",
          "description": "Enter height",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "width", "height"], [], []);
          return _this.coding.file.preview(user, project, fileId, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : updateFileRemark
     description    : 修改历史版本备注
     path            : user,project,file_id,history_id
     query            : remark
     */

    Files.prototype.updateFileRemark = function(user, project, file_id, history_id) {
      this.debug("Files::updateFileRemark()");
      return this.prompt.get([
        {
          "name": "remark",
          "description": "Enter remark",
          "type": "string",
          "required": true
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["remark"], [], []);
          return _this.coding.file.updateFileRemark(user, project, file_id, history_id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建文件
     path            : user,project,folderId
     query            : projectFile.deleted_at,projectFile.projects_id,projectFile.files_id,projectFile.comments,projectFile.id,folder.owner_id,folder.parent_id,folder.created_at,folder.updated_at,folder.type,folder.size,folder.name,folder.storage_type,folder.storage_key,folder.history_id,folder.id,name,content,folderId
     */

    Files.prototype.create = function(user, project, folderId) {
      this.debug("Files::create()");
      return this.prompt.get([
        {
          "name": "projectFile.deleted_at",
          "description": "Enter projectFile.deleted_at",
          "type": "string",
          "required": false
        }, {
          "name": "projectFile.projects_id",
          "description": "Enter projectFile.projects_id",
          "type": "integer",
          "required": false
        }, {
          "name": "projectFile.files_id",
          "description": "Enter projectFile.files_id",
          "type": "integer",
          "required": false
        }, {
          "name": "projectFile.comments",
          "description": "Enter projectFile.comments",
          "type": "integer",
          "required": false
        }, {
          "name": "projectFile.id",
          "description": "Enter projectFile.id",
          "type": "integer",
          "required": false
        }, {
          "name": "folder.owner_id",
          "description": "Enter folder.owner_id",
          "type": "integer",
          "required": false
        }, {
          "name": "folder.parent_id",
          "description": "Enter folder.parent_id",
          "type": "integer",
          "required": false
        }, {
          "name": "folder.created_at",
          "description": "Enter folder.created_at",
          "type": "ref",
          "required": false
        }, {
          "name": "folder.updated_at",
          "description": "Enter folder.updated_at",
          "type": "ref",
          "required": false
        }, {
          "name": "folder.type",
          "description": "Enter folder.type",
          "type": "integer",
          "required": false
        }, {
          "name": "folder.size",
          "description": "Enter folder.size",
          "type": "integer",
          "required": false
        }, {
          "name": "folder.name",
          "description": "Enter folder.name",
          "type": "string",
          "required": false
        }, {
          "name": "folder.storage_type",
          "description": "Enter folder.storage_type",
          "type": "string",
          "required": false
        }, {
          "name": "folder.storage_key",
          "description": "Enter folder.storage_key",
          "type": "string",
          "required": false
        }, {
          "name": "folder.history_id",
          "description": "Enter folder.history_id",
          "type": "integer",
          "required": false
        }, {
          "name": "folder.id",
          "description": "Enter folder.id",
          "type": "integer",
          "required": false
        }, {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }, {
          "name": "folderId",
          "description": "Enter folderId",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["projectFile.deleted_at", "projectFile.projects_id", "projectFile.files_id", "projectFile.comments", "projectFile.id", "folder.owner_id", "folder.parent_id", "folder.created_at", "folder.updated_at", "folder.type", "folder.size", "folder.name", "folder.storage_type", "folder.storage_key", "folder.history_id", "folder.id", "name", "content", "folderId"], [], []);
          return _this.coding.file.create(user, project, folderId, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : history
     description    : 文件历史
     path            : user,project,id
     query            : type,width,height
     */

    Files.prototype.history = function(user, project, id) {
      this.debug("Files::history()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }, {
          "name": "width",
          "description": "Enter width",
          "type": "integer",
          "required": false
        }, {
          "name": "height",
          "description": "Enter height",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "width", "height"], [], []);
          return _this.coding.file.history(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : mkdir
     description    : 创建文件夹
     path            : user,project
     query            : name,parentId
     */

    Files.prototype.mkdir = function(user, project) {
      this.debug("Files::mkdir()");
      return this.prompt.get([
        {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }, {
          "name": "parentId",
          "description": "Enter parentId",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["name", "parentId"], [], []);
          return _this.coding.file.mkdir(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : mkdir
     description    : 删除文件夹
     path            : user,project
     */

    Files.prototype.mkdir = function(user, project) {
      this.debug("Files::mkdir()");
      return this.coding.file.mkdir(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : move
     description    : 移动文件
     path            : user,project,dirId
     query            : fileId
     */

    Files.prototype.move = function(user, project, dirId) {
      this.debug("Files::move()");
      return this.prompt.get([
        {
          "name": "fileId",
          "description": "Enter fileId",
          "type": "ref",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["fileId"], [], []);
          return _this.coding.file.move(user, project, dirId, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : renameFolder
     description    : 重命名文件夹
     path            : user,project,dir
     query            : name
     */

    Files.prototype.renameFolder = function(user, project, dir) {
      this.debug("Files::renameFolder()");
      return this.prompt.get([
        {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["name"], [], []);
          return _this.coding.file.renameFolder(user, project, dir, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : files
     description    : 列出某目录下的文件
     path            : user,project,dir
     query            : type,width,height,page,pageSize
     */

    Files.prototype.files = function(user, project, dir) {
      this.debug("Files::files()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }, {
          "name": "width",
          "description": "Enter width",
          "type": "integer",
          "required": false
        }, {
          "name": "height",
          "description": "Enter height",
          "type": "integer",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "width", "height", "page", "pageSize"], [], []);
          return _this.coding.file.files(user, project, dir, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : folders
     description    : 列出所有一级目录
     path            : user,project
     query            : page,pageSize
     */

    Files.prototype.folders = function(user, project) {
      this.debug("Files::folders()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["page", "pageSize"], [], []);
          return _this.coding.file.folders(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : folders
     description    : 列出所有目录
     path            : user,project
     query            : page,pageSize
     */

    Files.prototype.folders = function(user, project) {
      this.debug("Files::folders()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["page", "pageSize"], [], []);
          return _this.coding.file.folders(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : count
     description    : 获取文件夹的文件数
     path            : user,project
     */

    Files.prototype.count = function(user, project) {
      this.debug("Files::count()");
      return this.coding.file.count(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };

    return Files;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Files(cmd);
  };

}).call(this);
