// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Files,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Files = (function(superClass) {
    extend(Files, superClass);

    function Files() {
      this.allFolderFileCount = bind(this.allFolderFileCount, this);
      this.listAllFolder = bind(this.listAllFolder, this);
      this.listFolder = bind(this.listFolder, this);
      this.listFile = bind(this.listFile, this);
      this.renameFolder = bind(this.renameFolder, this);
      this.move = bind(this.move, this);
      this.mkdir = bind(this.mkdir, this);
      this.listFileHistory = bind(this.listFileHistory, this);
      this.createFile = bind(this.createFile, this);
      this.updateFileHistoryRemark = bind(this.updateFileHistoryRemark, this);
      this.imagePreview = bind(this.imagePreview, this);
      this.viewFile = bind(this.viewFile, this);
      this.editFile = bind(this.editFile, this);
      this.downloadURL = bind(this.downloadURL, this);
      this.downloadFile = bind(this.downloadFile, this);
      this.uploadFile = bind(this.uploadFile, this);
      this.downloadHistory = bind(this.downloadHistory, this);
      this.deleteFileHistory = bind(this.deleteFileHistory, this);
      this.deleteFiles = bind(this.deleteFiles, this);
      this.uploadFileHistory = bind(this.uploadFileHistory, this);
      this.checkExisted = bind(this.checkExisted, this);
      this.init = bind(this.init, this);
      return Files.__super__.constructor.apply(this, arguments);
    }

    Files.prototype.init = function() {
      this.debug("init()");
      this.program.command("checkExisted").description("检查目录下是否有同名的文件")["arguments"]('<user> <project> <dir>').action(this.checkExisted);
      this.program.command("uploadFileHistory").description("上传文件新版本")["arguments"]('<user> <project>').action(this.uploadFileHistory);
      this.program.command("deleteFiles").description("删除文件")["arguments"]('<user> <project>').action(this.deleteFiles);
      this.program.command("deleteFileHistory").description("删除文件历史")["arguments"]('<user> <project> <id>').action(this.deleteFileHistory);
      this.program.command("downloadHistory").description("下载历史文件版本")["arguments"]('<user> <project> <id>').action(this.downloadHistory);
      this.program.command("uploadFile").description("上传私有项目的图片")["arguments"]('<user> <project>').action(this.uploadFile);
      this.program.command("downloadFile").description("文件下载")["arguments"]('<user> <project> <fileId>').action(this.downloadFile);
      this.program.command("downloadURL").description("文件下载URL")["arguments"]('<user> <project> <fileId>').action(this.downloadURL);
      this.program.command("editFile").description("编辑文件")["arguments"]('<user> <project> <fileId>').action(this.editFile);
      this.program.command("viewFile").description("查看文件")["arguments"]('<user> <project> <fileId>').action(this.viewFile);
      this.program.command("imagePreview").description("图片预览")["arguments"]('<user> <project> <fileId>').action(this.imagePreview);
      this.program.command("updateFileHistoryRemark").description("修改历史版本备注")["arguments"]('<user> <project> <file_id> <history_id>').action(this.updateFileHistoryRemark);
      this.program.command("createFile").description("创建文件")["arguments"]('<user> <project> <folderId>').action(this.createFile);
      this.program.command("listFileHistory").description("文件历史")["arguments"]('<user> <project> <id>').action(this.listFileHistory);
      this.program.command("mkdir").description("创建文件夹")["arguments"]('<user> <project>').action(this.mkdir);
      this.program.command("move").description("移动文件")["arguments"]('<user> <project> <dirId>').action(this.move);
      this.program.command("renameFolder").description("重命名文件夹")["arguments"]('<user> <project> <dir>').action(this.renameFolder);
      this.program.command("listFile").description("列出某目录下的文件")["arguments"]('<user> <project> <dir>').action(this.listFile);
      this.program.command("listFolder").description("列出所有一级目录")["arguments"]('<user> <project>').action(this.listFolder);
      this.program.command("listAllFolder").description("列出所有目录")["arguments"]('<user> <project>').action(this.listAllFolder);
      return this.program.command("allFolderFileCount").description("获取文件夹的文件数")["arguments"]('<user> <project>').action(this.allFolderFileCount);
    };


    /*
    
     operationId  : checkExisted
     description  : 检查目录下是否有同名的文件
     args     	: user,project,dir
     params 		:
     */

    Files.prototype.checkExisted = function(user, project, dir) {
      this.debug("checkExisted()");
      return this.coding.files.checkExisted(user, project, dir, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : uploadFileHistory
     description  : 上传文件新版本
     args     	: user,project
     params 		:
     */

    Files.prototype.uploadFileHistory = function(user, project) {
      this.debug("uploadFileHistory()");
      return this.coding.files.uploadFileHistory(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : deleteFiles
     description  : 删除文件
     args     	: user,project
     params 		:
     */

    Files.prototype.deleteFiles = function(user, project) {
      this.debug("deleteFiles()");
      return this.coding.files.deleteFiles(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : deleteFileHistory
     description  : 删除文件历史
     args     	: user,project,id
     params 		:
     */

    Files.prototype.deleteFileHistory = function(user, project, id) {
      this.debug("deleteFileHistory()");
      return this.coding.files.deleteFileHistory(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : downloadHistory
     description  : 下载历史文件版本
     args     	: user,project,id
     params 		:
     */

    Files.prototype.downloadHistory = function(user, project, id) {
      this.debug("downloadHistory()");
      return this.coding.files.downloadHistory(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : uploadFile
     description  : 上传私有项目的图片
     args     	: user,project
     params 		:
     */

    Files.prototype.uploadFile = function(user, project) {
      this.debug("uploadFile()");
      return this.coding.files.uploadFile(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : downloadFile
     description  : 文件下载
     args     	: user,project,fileId
     params 		:
     */

    Files.prototype.downloadFile = function(user, project, fileId) {
      this.debug("downloadFile()");
      return this.coding.files.downloadFile(user, project, fileId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : downloadURL
     description  : 文件下载URL
     args     	: user,project,fileId
     params 		:
     */

    Files.prototype.downloadURL = function(user, project, fileId) {
      this.debug("downloadURL()");
      return this.coding.files.downloadURL(user, project, fileId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : editFile
     description  : 编辑文件
     args     	: user,project,fileId
     params 		: name,content,fileId,name,content,fileId,
     */

    Files.prototype.editFile = function(user, project, fileId) {
      this.debug("editFile()");
      return this.coding.files.editFile(user, project, fileId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : viewFile
     description  : 查看文件
     args     	: user,project,fileId
     params 		: type,width,height,flag,type,width,height,flag,
     */

    Files.prototype.viewFile = function(user, project, fileId) {
      this.debug("viewFile()");
      return this.coding.files.viewFile(user, project, fileId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : imagePreview
     description  : 图片预览
     args     	: user,project,fileId
     params 		: type,width,height,type,width,height,
     */

    Files.prototype.imagePreview = function(user, project, fileId) {
      this.debug("imagePreview()");
      return this.coding.files.imagePreview(user, project, fileId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateFileHistoryRemark
     description  : 修改历史版本备注
     args     	: user,project,file_id,history_id
     params 		: remark,remark,
     */

    Files.prototype.updateFileHistoryRemark = function(user, project, file_id, history_id) {
      this.debug("updateFileHistoryRemark()");
      return this.coding.files.updateFileHistoryRemark(user, project, file_id, history_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : createFile
     description  : 创建文件
     args     	: user,project,folderId
     params 		: projectFile.deleted_at,projectFile.projects_id,projectFile.files_id,projectFile.comments,projectFile.id,folder.owner_id,folder.parent_id,folder.created_at,folder.updated_at,folder.type,folder.size,folder.name,folder.storage_type,folder.storage_key,folder.history_id,folder.id,name,content,folderId,projectFile.deleted_at,projectFile.projects_id,projectFile.files_id,projectFile.comments,projectFile.id,folder.owner_id,folder.parent_id,folder.created_at,folder.updated_at,folder.type,folder.size,folder.name,folder.storage_type,folder.storage_key,folder.history_id,folder.id,name,content,folderId,
     */

    Files.prototype.createFile = function(user, project, folderId) {
      this.debug("createFile()");
      return this.coding.files.createFile(user, project, folderId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listFileHistory
     description  : 文件历史
     args     	: user,project,id
     params 		: type,width,height,type,width,height,
     */

    Files.prototype.listFileHistory = function(user, project, id) {
      this.debug("listFileHistory()");
      return this.coding.files.listFileHistory(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : mkdir
     description  : 创建文件夹
     args     	: user,project
     params 		: name,parentId,name,parentId,
     */

    Files.prototype.mkdir = function(user, project) {
      this.debug("mkdir()");
      return this.coding.files.mkdir(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : move
     description  : 移动文件
     args     	: user,project,dirId
     params 		: fileId,fileId,
     */

    Files.prototype.move = function(user, project, dirId) {
      this.debug("move()");
      return this.coding.files.move(user, project, dirId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : renameFolder
     description  : 重命名文件夹
     args     	: user,project,dir
     params 		: name,name,
     */

    Files.prototype.renameFolder = function(user, project, dir) {
      this.debug("renameFolder()");
      return this.coding.files.renameFolder(user, project, dir, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listFile
     description  : 列出某目录下的文件
     args     	: user,project,dir
     params 		: type,width,height,page,pageSize,type,width,height,page,pageSize,
     */

    Files.prototype.listFile = function(user, project, dir) {
      this.debug("listFile()");
      return this.coding.files.listFile(user, project, dir, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listFolder
     description  : 列出所有一级目录
     args     	: user,project
     params 		: page,pageSize,page,pageSize,
     */

    Files.prototype.listFolder = function(user, project) {
      this.debug("listFolder()");
      return this.coding.files.listFolder(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listAllFolder
     description  : 列出所有目录
     args     	: user,project
     params 		: page,pageSize,page,pageSize,
     */

    Files.prototype.listAllFolder = function(user, project) {
      this.debug("listAllFolder()");
      return this.coding.files.listAllFolder(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : allFolderFileCount
     description  : 获取文件夹的文件数
     args     	: user,project
     params 		:
     */

    Files.prototype.allFolderFileCount = function(user, project) {
      this.debug("allFolderFileCount()");
      return this.coding.files.allFolderFileCount(user, project, params, function(data) {
        return console.log(data);
      });
    };

    return Files;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Files(cmd);
  };

}).call(this);
