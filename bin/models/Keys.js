// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Keys,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Keys = (function(superClass) {
    extend(Keys, superClass);

    function Keys() {
      this.unBindDeployKey = bind(this.unBindDeployKey, this);
      this.listDeployKeys = bind(this.listDeployKeys, this);
      this.saveDeployKey = bind(this.saveDeployKey, this);
      this.bindDeployKey = bind(this.bindDeployKey, this);
      this.list_1 = bind(this.list_1, this);
      this.show_1 = bind(this.show_1, this);
      this.init = bind(this.init, this);
      return Keys.__super__.constructor.apply(this, arguments);
    }

    Keys.prototype.init = function() {
      this.debug("init()");
      this.program.command("show_1").description("通过KeyId获取个人公钥")["arguments"]('<global_key> <keyId>').action(this.show_1);
      this.program.command("list_1").description("列出个人公钥")["arguments"]('<global_key>').action(this.list_1);
      this.program.command("bindDeployKey").description("绑定部署公钥")["arguments"]('<global_key> <project> <id>').action(this.bindDeployKey);
      this.program.command("saveDeployKey").description("新建部署公钥")["arguments"]('<global_key> <project>').action(this.saveDeployKey);
      this.program.command("listDeployKeys").description("列出部署公钥")["arguments"]('<global_key> <project>').action(this.listDeployKeys);
      return this.program.command("unBindDeployKey").description("解绑部署公钥")["arguments"]('<global_key> <project> <id>').action(this.unBindDeployKey);
    };


    /*
    
     operationId  : show_1
     description  : 通过KeyId获取个人公钥
     args     	: global_key,keyId
     params 		:
     */

    Keys.prototype.show_1 = function(global_key, keyId) {
      this.debug("show_1()");
      return this.coding.keys.show_1(global_key, keyId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : list_1
     description  : 列出个人公钥
     args     	: global_key
     params 		: withIDEKey,withIDEKey,
     */

    Keys.prototype.list_1 = function(global_key) {
      this.debug("list_1()");
      return this.coding.keys.list_1(global_key, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : bindDeployKey
     description  : 绑定部署公钥
     args     	: global_key,project,id
     params 		:
     */

    Keys.prototype.bindDeployKey = function(global_key, project, id) {
      this.debug("bindDeployKey()");
      return this.coding.keys.bindDeployKey(global_key, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : saveDeployKey
     description  : 新建部署公钥
     args     	: global_key,project
     params 		: title,content,title,content,
     */

    Keys.prototype.saveDeployKey = function(global_key, project) {
      this.debug("saveDeployKey()");
      return this.coding.keys.saveDeployKey(global_key, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listDeployKeys
     description  : 列出部署公钥
     args     	: global_key,project
     params 		:
     */

    Keys.prototype.listDeployKeys = function(global_key, project) {
      this.debug("listDeployKeys()");
      return this.coding.keys.listDeployKeys(global_key, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : unBindDeployKey
     description  : 解绑部署公钥
     args     	: global_key,project,id
     params 		:
     */

    Keys.prototype.unBindDeployKey = function(global_key, project, id) {
      this.debug("unBindDeployKey()");
      return this.coding.keys.unBindDeployKey(global_key, project, id, params, function(data) {
        return console.log(data);
      });
    };

    return Keys;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Keys(cmd);
  };

}).call(this);
