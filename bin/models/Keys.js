// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Keys,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Keys = (function(superClass) {
    extend(Keys, superClass);

    function Keys() {
      this.webhook = bind(this.webhook, this);
      this.list = bind(this.list, this);
      this.webhook = bind(this.webhook, this);
      this.webhook = bind(this.webhook, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      this.key = bind(this.key, this);
      this.get = bind(this.get, this);
      this.init = bind(this.init, this);
      return Keys.__super__.constructor.apply(this, arguments);
    }

    Keys.prototype.init = function() {
      this.debug("init()");
      this.program.command("get").description("通过KeyId获取个人公钥")["arguments"]("<user> <keyId>").action(this.get);
      this.program.command("key").description("删除个人公钥")["arguments"]("<user> <keyId>").action(this.key);
      this.program.command("list").description("列出个人公钥")["arguments"]("<user>").action(this.list);
      this.program.command("create").description("创建个人公钥")["arguments"]("<user>").action(this.create);
      this.program.command("webhook").description("绑定部署公钥")["arguments"]("<user> <project> <id>").action(this.webhook);
      this.program.command("webhook").description("新建部署公钥")["arguments"]("<user> <project>").action(this.webhook);
      this.program.command("list").description("列出部署公钥")["arguments"]("<user> <project>").action(this.list);
      return this.program.command("webhook").description("解绑部署公钥")["arguments"]("<user> <project> <id>").action(this.webhook);
    };


    /*
    
     method            : get
     summary         : get
     description    : 通过KeyId获取个人公钥
     path            : user,keyId
     */

    Keys.prototype.get = function(user, keyId) {
      this.debug("Keys::get()");
      return this.coding.key.get(user, keyId, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : key
     description    : 删除个人公钥
     path            : user,keyId
     */

    Keys.prototype.key = function(user, keyId) {
      this.debug("Keys::key()");
      return this.coding.key.key(user, keyId, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出个人公钥
     path            : user
     query            : withIDEKey
     */

    Keys.prototype.list = function(user) {
      this.debug("Keys::list()");
      return this.prompt.get([
        {
          "name": "withIDEKey",
          "description": "Enter withIDEKey",
          "type": "boolean",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["withIDEKey"], [], []);
          return _this.coding.key.list(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建个人公钥
     path            : user
     query            : title,content
     */

    Keys.prototype.create = function(user) {
      this.debug("Keys::create()");
      return this.prompt.get([
        {
          "name": "title",
          "description": "Enter title",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["title", "content"], [], []);
          return _this.coding.key.create(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : webhook
     description    : 绑定部署公钥
     path            : user,project,id
     */

    Keys.prototype.webhook = function(user, project, id) {
      this.debug("Keys::webhook()");
      return this.coding.key.webhook(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : webhook
     description    : 新建部署公钥
     path            : user,project
     query            : title,content
     */

    Keys.prototype.webhook = function(user, project) {
      this.debug("Keys::webhook()");
      return this.prompt.get([
        {
          "name": "title",
          "description": "Enter title",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["title", "content"], [], []);
          return _this.coding.key.webhook(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : list
     description    : 列出部署公钥
     path            : user,project
     */

    Keys.prototype.list = function(user, project) {
      this.debug("Keys::list()");
      return this.coding.key.list(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : webhook
     description    : 解绑部署公钥
     path            : user,project,id
     */

    Keys.prototype.webhook = function(user, project, id) {
      this.debug("Keys::webhook()");
      return this.coding.key.webhook(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };

    return Keys;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Keys(cmd);
  };

}).call(this);
