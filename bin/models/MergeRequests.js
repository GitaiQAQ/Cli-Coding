// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, MergeRequests,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  MergeRequests = (function(superClass) {
    extend(MergeRequests, superClass);

    function MergeRequests() {
      this.list = bind(this.list, this);
      this.refuse = bind(this.refuse, this);
      this.merge = bind(this.merge, this);
      this.cancel = bind(this.cancel, this);
      this.update = bind(this.update, this);
      this.get = bind(this.get, this);
      this.create = bind(this.create, this);
      this.init = bind(this.init, this);
      return MergeRequests.__super__.constructor.apply(this, arguments);
    }

    MergeRequests.prototype.init = function() {
      this.debug("init()");
      this.program.command("create").description("创建 MergeRequest")["arguments"]("<user> <project>").action(this.create);
      this.program.command("get").description("显示某个 MergeRequest")["arguments"]("<user> <project> <iid>").action(this.get);
      this.program.command("update").description("更新某个 MergeRequest")["arguments"]("<user> <project> <iid>").action(this.update);
      this.program.command("cancel").description("取消 MergeRequest")["arguments"]("<user> <project> <iid>").action(this.cancel);
      this.program.command("merge").description("合并某个 MergeRequest")["arguments"]("<user> <project> <iid>").action(this.merge);
      this.program.command("refuse").description("拒绝某个 MergeRequest")["arguments"]("<user> <project> <iid>").action(this.refuse);
      return this.program.command("list").description("MergeRequest 列表")["arguments"]("<user> <project> <status>").action(this.list);
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建 MergeRequest
     path            : user,project
     query            : srcBranch,desBranch,title,content,reviewers,tasks
     */

    MergeRequests.prototype.create = function(user, project) {
      this.debug("MergeRequests::create()");
      return this.prompt.get([
        {
          "name": "srcBranch",
          "description": "Enter srcBranch",
          "type": "string",
          "required": false
        }, {
          "name": "desBranch",
          "description": "Enter desBranch",
          "type": "string",
          "required": false
        }, {
          "name": "title",
          "description": "Enter title",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }, {
          "name": "reviewers",
          "description": "Enter reviewers",
          "type": "string",
          "required": false
        }, {
          "name": "tasks",
          "description": "Enter tasks",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["srcBranch", "desBranch", "title", "content", "reviewers", "tasks"], [], []);
          return _this.coding.mergeRequest.create(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : get
     description    : 显示某个 MergeRequest
     path            : user,project,iid
     query            : diff
     */

    MergeRequests.prototype.get = function(user, project, iid) {
      this.debug("MergeRequests::get()");
      return this.prompt.get([
        {
          "name": "diff",
          "description": "Enter diff",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["diff"], [], []);
          return _this.coding.mergeRequest.get(user, project, iid, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : update
     description    : 更新某个 MergeRequest
     path            : user,project,iid
     query            : srcBranch,desBranch,title,content,reviewers,tasks
     */

    MergeRequests.prototype.update = function(user, project, iid) {
      this.debug("MergeRequests::update()");
      return this.prompt.get([
        {
          "name": "srcBranch",
          "description": "Enter srcBranch",
          "type": "string",
          "required": false
        }, {
          "name": "desBranch",
          "description": "Enter desBranch",
          "type": "string",
          "required": false
        }, {
          "name": "title",
          "description": "Enter title",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }, {
          "name": "reviewers",
          "description": "Enter reviewers",
          "type": "string",
          "required": false
        }, {
          "name": "tasks",
          "description": "Enter tasks",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["srcBranch", "desBranch", "title", "content", "reviewers", "tasks"], [], []);
          return _this.coding.mergeRequest.update(user, project, iid, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : cancel
     description    : 取消 MergeRequest
     path            : user,project,iid
     */

    MergeRequests.prototype.cancel = function(user, project, iid) {
      this.debug("MergeRequests::cancel()");
      return this.coding.mergeRequest.cancel(user, project, iid, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : merge
     description    : 合并某个 MergeRequest
     path            : user,project,iid
     query            : message,del_source_branch
     */

    MergeRequests.prototype.merge = function(user, project, iid) {
      this.debug("MergeRequests::merge()");
      return this.prompt.get([
        {
          "name": "message",
          "description": "Enter message",
          "type": "string",
          "required": false
        }, {
          "name": "del_source_branch",
          "description": "Enter del_source_branch",
          "type": "boolean",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["message", "del_source_branch"], [], []);
          return _this.coding.mergeRequest.merge(user, project, iid, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : refuse
     description    : 拒绝某个 MergeRequest
     path            : user,project,iid
     */

    MergeRequests.prototype.refuse = function(user, project, iid) {
      this.debug("MergeRequests::refuse()");
      return this.coding.mergeRequest.refuse(user, project, iid, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : list
     description    : MergeRequest 列表
     path            : user,project,status
     query            : page,pageSize
     */

    MergeRequests.prototype.list = function(user, project, status) {
      this.debug("MergeRequests::list()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["page", "pageSize"], [], []);
          return _this.coding.mergeRequest.list(user, project, status, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return MergeRequests;

  })(BaseModel);

  module.exports = function(cmd) {
    return new MergeRequests(cmd);
  };

}).call(this);
