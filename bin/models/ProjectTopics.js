// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, ProjectTopics,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  ProjectTopics = (function(superClass) {
    extend(ProjectTopics, superClass);

    function ProjectTopics() {
      this.watchers = bind(this.watchers, this);
      this.watch = bind(this.watch, this);
      this.operateTopicLabel = bind(this.operateTopicLabel, this);
      this.deleteTopicLabel = bind(this.deleteTopicLabel, this);
      this.addTopicLabel = bind(this.addTopicLabel, this);
      this.comments = bind(this.comments, this);
      this.del = bind(this.del, this);
      this.update = bind(this.update, this);
      this.detail = bind(this.detail, this);
      this.watchedProjectTopicList = bind(this.watchedProjectTopicList, this);
      this.list = bind(this.list, this);
      this.count = bind(this.count, this);
      this.getProjectTopicByLabel = bind(this.getProjectTopicByLabel, this);
      this.count = bind(this.count, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      this.init = bind(this.init, this);
      return ProjectTopics.__super__.constructor.apply(this, arguments);
    }

    ProjectTopics.prototype.init = function() {
      this.debug("init()");
      this.program.command("list").description("项目讨论列表")["arguments"]("<user> <project>").action(this.list);
      this.program.command("create").description("创建讨论/发表评论")["arguments"]("<user> <project>").action(this.create);
      this.program.command("count").description("所有讨论的个数和我的讨论的个数")["arguments"]("<user> <project>").action(this.count);
      this.program.command("getProjectTopicByLabel").description("通过标签获得讨论列表")["arguments"]("<user> <project> <id>").action(this.getProjectTopicByLabel);
      this.program.command("count").description("所有讨论的个数和我的讨论的个数")["arguments"]("<user> <project>").action(this.count);
      this.program.command("list").description("我的讨论")["arguments"]("<user> <project>").action(this.list);
      this.program.command("watchedProjectTopicList").description("获取我关注的讨论列表")["arguments"]("<user> <project>").action(this.watchedProjectTopicList);
      this.program.command("detail").description("讨论详情")["arguments"]("<user> <project> <id>").action(this.detail);
      this.program.command("update").description("更新讨论")["arguments"]("<user> <project> <id>").action(this.update);
      this.program.command("del").description("删除讨论/删除讨论评论")["arguments"]("<user> <project> <id>").action(this.del);
      this.program.command("comments").description("讨论评论列表")["arguments"]("<user> <project> <id>").action(this.comments);
      this.program.command("addTopicLabel").description("讨论添加标签")["arguments"]("<user> <project> <id> <labelId>").action(this.addTopicLabel);
      this.program.command("deleteTopicLabel").description("删除讨论标签")["arguments"]("<user> <project> <id> <labelId>").action(this.deleteTopicLabel);
      this.program.command("operateTopicLabel").description("批量操作讨论标签")["arguments"]("<user> <project> <id>").action(this.operateTopicLabel);
      this.program.command("watch").description("关注讨论")["arguments"]("<user> <project> <id>").action(this.watch);
      return this.program.command("watchers").description("获取关注该讨论的用户")["arguments"]("<user> <project> <id>").action(this.watchers);
    };


    /*
    
     method            : get
     summary         : list
     description    : 项目讨论列表
     path            : user,project
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.list = function(user, project) {
      this.debug("ProjectTopics::list()");
      return this.prompt.get([
        {
          "name": "orderBy",
          "description": "Enter orderBy",
          "type": "integer",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.list(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建讨论/发表评论
     path            : user,project
     query            : parent,title,content,label,type
     */

    ProjectTopics.prototype.create = function(user, project) {
      this.debug("ProjectTopics::create()");
      return this.prompt.get([
        {
          "name": "parent",
          "description": "Enter parent",
          "type": "integer",
          "required": false
        }, {
          "name": "title",
          "description": "Enter title",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }, {
          "name": "label",
          "description": "Enter label",
          "type": "string",
          "required": false
        }, {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.create(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : count
     description    : 所有讨论的个数和我的讨论的个数
     path            : user,project
     */

    ProjectTopics.prototype.count = function(user, project) {
      this.debug("ProjectTopics::count()");
      return this.coding.projectTopic.count(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : getProjectTopicByLabel
     description    : 通过标签获得讨论列表
     path            : user,project,id
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.getProjectTopicByLabel = function(user, project, id) {
      this.debug("ProjectTopics::getProjectTopicByLabel()");
      return this.prompt.get([
        {
          "name": "orderBy",
          "description": "Enter orderBy",
          "type": "integer",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.getProjectTopicByLabel(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : count
     description    : 所有讨论的个数和我的讨论的个数
     path            : user,project
     */

    ProjectTopics.prototype.count = function(user, project) {
      this.debug("ProjectTopics::count()");
      return this.coding.projectTopic.count(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : list
     description    : 我的讨论
     path            : user,project
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.list = function(user, project) {
      this.debug("ProjectTopics::list()");
      return this.prompt.get([
        {
          "name": "orderBy",
          "description": "Enter orderBy",
          "type": "integer",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.list(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : watchedProjectTopicList
     description    : 获取我关注的讨论列表
     path            : user,project
     query            : orderBy,page,pageSize
     */

    ProjectTopics.prototype.watchedProjectTopicList = function(user, project) {
      this.debug("ProjectTopics::watchedProjectTopicList()");
      return this.prompt.get([
        {
          "name": "orderBy",
          "description": "Enter orderBy",
          "type": "integer",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.watchedProjectTopicList(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : detail
     description    : 讨论详情
     path            : user,project,id
     query            : type,toc
     */

    ProjectTopics.prototype.detail = function(user, project, id) {
      this.debug("ProjectTopics::detail()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }, {
          "name": "toc",
          "description": "Enter toc",
          "type": "boolean",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.detail(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : update
     description    : 更新讨论
     path            : user,project,id
     query            : topic_id,title,content,label
     */

    ProjectTopics.prototype.update = function(user, project, id) {
      this.debug("ProjectTopics::update()");
      return this.prompt.get([
        {
          "name": "topic_id",
          "description": "Enter topic_id",
          "type": "integer",
          "required": false
        }, {
          "name": "title",
          "description": "Enter title",
          "type": "string",
          "required": false
        }, {
          "name": "content",
          "description": "Enter content",
          "type": "string",
          "required": false
        }, {
          "name": "label",
          "description": "Enter label",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.update(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : del
     description    : 删除讨论/删除讨论评论
     path            : user,project,id
     */

    ProjectTopics.prototype.del = function(user, project, id) {
      this.debug("ProjectTopics::del()");
      return this.coding.projectTopic.del(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : comments
     description    : 讨论评论列表
     path            : user,project,id
     query            : page,pageSize,type
     */

    ProjectTopics.prototype.comments = function(user, project, id) {
      this.debug("ProjectTopics::comments()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }, {
          "name": "type",
          "description": "Enter type",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.comments(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : addTopicLabel
     description    : 讨论添加标签
     path            : user,project,id,labelId
     */

    ProjectTopics.prototype.addTopicLabel = function(user, project, id, labelId) {
      this.debug("ProjectTopics::addTopicLabel()");
      return this.coding.projectTopic.addTopicLabel(user, project, id, labelId, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : deleteTopicLabel
     description    : 删除讨论标签
     path            : user,project,id,labelId
     */

    ProjectTopics.prototype.deleteTopicLabel = function(user, project, id, labelId) {
      this.debug("ProjectTopics::deleteTopicLabel()");
      return this.coding.projectTopic.deleteTopicLabel(user, project, id, labelId, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : operateTopicLabel
     description    : 批量操作讨论标签
     path            : user,project,id
     query            : labelIdStrs
     */

    ProjectTopics.prototype.operateTopicLabel = function(user, project, id) {
      this.debug("ProjectTopics::operateTopicLabel()");
      return this.prompt.get([
        {
          "name": "labelIdStrs",
          "description": "Enter labelIdStrs",
          "type": "string",
          "required": true
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.operateTopicLabel(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : watch
     description    : 关注讨论
     path            : user,project,id
     */

    ProjectTopics.prototype.watch = function(user, project, id) {
      this.debug("ProjectTopics::watch()");
      return this.coding.projectTopic.watch(user, project, id, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : watchers
     description    : 获取关注该讨论的用户
     path            : user,project,id
     query            : page,pageSize
     */

    ProjectTopics.prototype.watchers = function(user, project, id) {
      this.debug("ProjectTopics::watchers()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.projectTopic.watchers(user, project, id, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return ProjectTopics;

  })(BaseModel);

  module.exports = function(cmd) {
    return new ProjectTopics(cmd);
  };

}).call(this);
