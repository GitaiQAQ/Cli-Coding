// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Project_topics,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Project_topics = (function(superClass) {
    extend(Project_topics, superClass);

    function Project_topics() {
      this.getTopicWatchers = bind(this.getTopicWatchers, this);
      this.watch_1 = bind(this.watch_1, this);
      this.operateTopicLabels = bind(this.operateTopicLabels, this);
      this.addTopicLabel = bind(this.addTopicLabel, this);
      this.projectTopicComments = bind(this.projectTopicComments, this);
      this.projectTopicDetail = bind(this.projectTopicDetail, this);
      this.myWatchingProjectTopics = bind(this.myWatchingProjectTopics, this);
      this.myProjectTopicList = bind(this.myProjectTopicList, this);
      this.getMyLabelByProject = bind(this.getMyLabelByProject, this);
      this.getProjectTopicByLabel = bind(this.getProjectTopicByLabel, this);
      this.topicCount = bind(this.topicCount, this);
      this.projectTopicList = bind(this.projectTopicList, this);
      this.init = bind(this.init, this);
      return Project_topics.__super__.constructor.apply(this, arguments);
    }

    Project_topics.prototype.init = function() {
      this.debug("init()");
      this.program.command("projectTopicList").description("项目讨论列表")["arguments"]('<user> <project>').action(this.projectTopicList);
      this.program.command("topicCount").description("所有讨论的个数和我的讨论的个数")["arguments"]('<user> <project>').action(this.topicCount);
      this.program.command("getProjectTopicByLabel").description("通过标签获得讨论列表")["arguments"]('<user> <project> <id>').action(this.getProjectTopicByLabel);
      this.program.command("getMyLabelByProject").description("所有讨论的个数和我的讨论的个数")["arguments"]('<user> <project>').action(this.getMyLabelByProject);
      this.program.command("myProjectTopicList").description("我的讨论")["arguments"]('<user> <project>').action(this.myProjectTopicList);
      this.program.command("myWatchingProjectTopics").description("获取我关注的讨论列表")["arguments"]('<user> <project>').action(this.myWatchingProjectTopics);
      this.program.command("projectTopicDetail").description("讨论详情")["arguments"]('<user> <project> <id>').action(this.projectTopicDetail);
      this.program.command("projectTopicComments").description("讨论评论列表")["arguments"]('<user> <project> <id>').action(this.projectTopicComments);
      this.program.command("addTopicLabel").description("讨论添加标签")["arguments"]('<user> <project> <id> <labelId>').action(this.addTopicLabel);
      this.program.command("operateTopicLabels").description("批量操作讨论标签")["arguments"]('<user> <project> <id>').action(this.operateTopicLabels);
      this.program.command("watch_1").description("关注讨论")["arguments"]('<user> <project> <id>').action(this.watch_1);
      return this.program.command("getTopicWatchers").description("获取关注该讨论的用户")["arguments"]('<user> <project> <id>').action(this.getTopicWatchers);
    };


    /*
    
     operationId  : projectTopicList
     description  : 项目讨论列表
     args     	: user,project
     params 		: orderBy,page,pageSize,orderBy,page,pageSize,
     */

    Project_topics.prototype.projectTopicList = function(user, project) {
      this.debug("projectTopicList()");
      return this.coding.projectTopics.projectTopicList(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : topicCount
     description  : 所有讨论的个数和我的讨论的个数
     args     	: user,project
     params 		:
     */

    Project_topics.prototype.topicCount = function(user, project) {
      this.debug("topicCount()");
      return this.coding.projectTopics.topicCount(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getProjectTopicByLabel
     description  : 通过标签获得讨论列表
     args     	: user,project,id
     params 		: orderBy,page,pageSize,orderBy,page,pageSize,
     */

    Project_topics.prototype.getProjectTopicByLabel = function(user, project, id) {
      this.debug("getProjectTopicByLabel()");
      return this.coding.projectTopics.getProjectTopicByLabel(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getMyLabelByProject
     description  : 所有讨论的个数和我的讨论的个数
     args     	: user,project
     params 		:
     */

    Project_topics.prototype.getMyLabelByProject = function(user, project) {
      this.debug("getMyLabelByProject()");
      return this.coding.projectTopics.getMyLabelByProject(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : myProjectTopicList
     description  : 我的讨论
     args     	: user,project
     params 		: orderBy,page,pageSize,orderBy,page,pageSize,
     */

    Project_topics.prototype.myProjectTopicList = function(user, project) {
      this.debug("myProjectTopicList()");
      return this.coding.projectTopics.myProjectTopicList(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : myWatchingProjectTopics
     description  : 获取我关注的讨论列表
     args     	: user,project
     params 		: orderBy,page,pageSize,orderBy,page,pageSize,
     */

    Project_topics.prototype.myWatchingProjectTopics = function(user, project) {
      this.debug("myWatchingProjectTopics()");
      return this.coding.projectTopics.myWatchingProjectTopics(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : projectTopicDetail
     description  : 讨论详情
     args     	: user,project,id
     params 		: type,toc,type,toc,
     */

    Project_topics.prototype.projectTopicDetail = function(user, project, id) {
      this.debug("projectTopicDetail()");
      return this.coding.projectTopics.projectTopicDetail(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : projectTopicComments
     description  : 讨论评论列表
     args     	: user,project,id
     params 		: page,pageSize,type,page,pageSize,type,
     */

    Project_topics.prototype.projectTopicComments = function(user, project, id) {
      this.debug("projectTopicComments()");
      return this.coding.projectTopics.projectTopicComments(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : addTopicLabel
     description  : 讨论添加标签
     args     	: user,project,id,labelId
     params 		:
     */

    Project_topics.prototype.addTopicLabel = function(user, project, id, labelId) {
      this.debug("addTopicLabel()");
      return this.coding.projectTopics.addTopicLabel(user, project, id, labelId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : operateTopicLabels
     description  : 批量操作讨论标签
     args     	: user,project,id
     params 		: label_id,label_id,
     */

    Project_topics.prototype.operateTopicLabels = function(user, project, id) {
      this.debug("operateTopicLabels()");
      return this.coding.projectTopics.operateTopicLabels(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : watch_1
     description  : 关注讨论
     args     	: user,project,id
     params 		:
     */

    Project_topics.prototype.watch_1 = function(user, project, id) {
      this.debug("watch_1()");
      return this.coding.projectTopics.watch_1(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getTopicWatchers
     description  : 获取关注该讨论的用户
     args     	: user,project,id
     params 		: page,pageSize,page,pageSize,
     */

    Project_topics.prototype.getTopicWatchers = function(user, project, id) {
      this.debug("getTopicWatchers()");
      return this.coding.projectTopics.getTopicWatchers(user, project, id, params, function(data) {
        return console.log(data);
      });
    };

    return Project_topics;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Project_topics(cmd);
  };

}).call(this);
