// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Projects,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Projects = (function(superClass) {
    extend(Projects, superClass);

    function Projects() {
      this.publicProjects = bind(this.publicProjects, this);
      this.publicProjects = bind(this.publicProjects, this);
      this.publicProjects = bind(this.publicProjects, this);
      this.publicProjects = bind(this.publicProjects, this);
      this.publicProjects = bind(this.publicProjects, this);
      this.publicProjects = bind(this.publicProjects, this);
      this.createProject = bind(this.createProject, this);
      this.privateProjects = bind(this.privateProjects, this);
      this.privateProjects = bind(this.privateProjects, this);
      this.privateProjects = bind(this.privateProjects, this);
      this.privateProjects = bind(this.privateProjects, this);
      this.privateProjects = bind(this.privateProjects, this);
      this.privateProjects = bind(this.privateProjects, this);
      this.projectList = bind(this.projectList, this);
      this.watched = bind(this.watched, this);
      this.watched = bind(this.watched, this);
      this.watch = bind(this.watch, this);
      this.visitProject = bind(this.visitProject, this);
      this.unwatch = bind(this.unwatch, this);
      this.unstar = bind(this.unstar, this);
      this.stared = bind(this.stared, this);
      this.star = bind(this.star, this);
      this.setProjectIcon = bind(this.setProjectIcon, this);
      this.deleteProject = bind(this.deleteProject, this);
      this.queryByName = bind(this.queryByName, this);
      this.publicProjects = bind(this.publicProjects, this);
      this.recommendedList = bind(this.recommendedList, this);
      this.update = bind(this.update, this);
      this.pinProject = bind(this.pinProject, this);
      this.pinProject = bind(this.pinProject, this);
      this.pinProject = bind(this.pinProject, this);
      this.init = bind(this.init, this);
      return Projects.__super__.constructor.apply(this, arguments);
    }

    Projects.prototype.init = function() {
      this.debug("init()");
      this.program.command("pinProject").description("获取常用项目列表").action(this.pinProject);
      this.program.command("pinProject").description("设置常用项目").action(this.pinProject);
      this.program.command("pinProject").description("取消常用项目").action(this.pinProject);
      this.program.command("update").description("更新项目信息").action(this.update);
      this.program.command("recommendedList").description("推荐项目list").action(this.recommendedList);
      this.program.command("publicProjects").description("公有项目列表").action(this.publicProjects);
      this.program.command("queryByName").description("通过名称查询")["arguments"]("<user> <project>").action(this.queryByName);
      this.program.command("deleteProject").description("删除项目")["arguments"]("<user> <project>").action(this.deleteProject);
      this.program.command("setProjectIcon").description("设置项目图标")["arguments"]("<user> <project>").action(this.setProjectIcon);
      this.program.command("star").description("收藏项目")["arguments"]("<user> <project>").action(this.star);
      this.program.command("stared").description("项目是否被收藏")["arguments"]("<user> <project>").action(this.stared);
      this.program.command("unstar").description("项目取消收藏")["arguments"]("<user> <project>").action(this.unstar);
      this.program.command("unwatch").description("项目取消关注")["arguments"]("<user> <project>").action(this.unwatch);
      this.program.command("visitProject").description("更新项目阅读时间")["arguments"]("<user> <project>").action(this.visitProject);
      this.program.command("watch").description("关注项目")["arguments"]("<user> <project>").action(this.watch);
      this.program.command("watched").description("项目是否被关注")["arguments"]("<user> <project>").action(this.watched);
      this.program.command("watched").description("项目关注者")["arguments"]("<user> <project>").action(this.watched);
      this.program.command("projectList").description("我的项目列表").action(this.projectList);
      this.program.command("privateProjects").description("私有项目列表").action(this.privateProjects);
      this.program.command("privateProjects").description("私有项目列表").action(this.privateProjects);
      this.program.command("privateProjects").description("私有项目列表").action(this.privateProjects);
      this.program.command("privateProjects").description("私有项目列表").action(this.privateProjects);
      this.program.command("privateProjects").description("私有项目列表").action(this.privateProjects);
      this.program.command("privateProjects").description("私有项目列表").action(this.privateProjects);
      this.program.command("createProject").description("创建项目")["arguments"]("<user>").action(this.createProject);
      this.program.command("publicProjects").description("公有项目列表")["arguments"]("<user>").action(this.publicProjects);
      this.program.command("publicProjects").description("公有项目列表")["arguments"]("<user>").action(this.publicProjects);
      this.program.command("publicProjects").description("公有项目列表")["arguments"]("<user>").action(this.publicProjects);
      this.program.command("publicProjects").description("公有项目列表")["arguments"]("<user>").action(this.publicProjects);
      this.program.command("publicProjects").description("公有项目列表")["arguments"]("<user>").action(this.publicProjects);
      return this.program.command("publicProjects").description("公有项目列表")["arguments"]("<user>").action(this.publicProjects);
    };


    /*
    
     method            : get
     summary         : pinProject
     description    : 获取常用项目列表
     query            : page,pageSize
     */

    Projects.prototype.pinProject = function() {
      this.debug("Projects::pinProject()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["page", "pageSize"], [], []);
          return _this.coding.project.pinProject(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : pinProject
     description    : 设置常用项目
     body            : ids
     */

    Projects.prototype.pinProject = function() {
      this.debug("Projects::pinProject()");
      return this.prompt.get([
        {
          "name": "ids",
          "description": "Enter ids",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], [], ["ids"], []);
          return _this.coding.project.pinProject(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : pinProject
     description    : 取消常用项目
     body            : ids
     */

    Projects.prototype.pinProject = function() {
      this.debug("Projects::pinProject()");
      return this.prompt.get([
        {
          "name": "ids",
          "description": "Enter ids",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], [], ["ids"], []);
          return _this.coding.project.pinProject(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : update
     description    : 更新项目信息
     query            : id,name,description
     */

    Projects.prototype.update = function() {
      this.debug("Projects::update()");
      return this.prompt.get([
        {
          "name": "id",
          "description": "Enter id",
          "type": "string",
          "required": false
        }, {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }, {
          "name": "description",
          "description": "Enter description",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["id", "name", "description"], [], []);
          return _this.coding.project.update(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : recommendedList
     description    : 推荐项目list
     */

    Projects.prototype.recommendedList = function() {
      this.debug("Projects::recommendedList()");
      return this.coding.project.recommendedList((function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : publicProjects
     description    : 公有项目列表
     query            : page,pageSize
     */

    Projects.prototype.publicProjects = function() {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : queryByName
     description    : 通过名称查询
     path            : user,project
     */

    Projects.prototype.queryByName = function(user, project) {
      this.debug("Projects::queryByName()");
      return this.coding.project.queryByName(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : deleteProject
     description    : 删除项目
     path            : user,project
     query            : name
     */

    Projects.prototype.deleteProject = function(user, project) {
      this.debug("Projects::deleteProject()");
      return this.prompt.get([
        {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["name"], [], []);
          return _this.coding.project.deleteProject(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : setProjectIcon
     description    : 设置项目图标
     path            : user,project
     */

    Projects.prototype.setProjectIcon = function(user, project) {
      this.debug("Projects::setProjectIcon()");
      return this.coding.project.setProjectIcon(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : star
     description    : 收藏项目
     path            : user,project
     */

    Projects.prototype.star = function(user, project) {
      this.debug("Projects::star()");
      return this.coding.project.star(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : stared
     description    : 项目是否被收藏
     path            : user,project
     */

    Projects.prototype.stared = function(user, project) {
      this.debug("Projects::stared()");
      return this.coding.project.stared(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : unstar
     description    : 项目取消收藏
     path            : user,project
     */

    Projects.prototype.unstar = function(user, project) {
      this.debug("Projects::unstar()");
      return this.coding.project.unstar(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : unwatch
     description    : 项目取消关注
     path            : user,project
     */

    Projects.prototype.unwatch = function(user, project) {
      this.debug("Projects::unwatch()");
      return this.coding.project.unwatch(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : visitProject
     description    : 更新项目阅读时间
     path            : user,project
     */

    Projects.prototype.visitProject = function(user, project) {
      this.debug("Projects::visitProject()");
      return this.coding.project.visitProject(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : watch
     description    : 关注项目
     path            : user,project
     */

    Projects.prototype.watch = function(user, project) {
      this.debug("Projects::watch()");
      return this.coding.project.watch(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : watched
     description    : 项目是否被关注
     path            : user,project
     */

    Projects.prototype.watched = function(user, project) {
      this.debug("Projects::watched()");
      return this.coding.project.watched(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : watched
     description    : 项目关注者
     path            : user,project
     */

    Projects.prototype.watched = function(user, project) {
      this.debug("Projects::watched()");
      return this.coding.project.watched(user, project, (function(_this) {
        return function(data) {
          return _this.showData(data);
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : projectList
     description    : 我的项目列表
     query            : type,sort,page,pageSize
     */

    Projects.prototype.projectList = function() {
      this.debug("Projects::projectList()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "sort",
          "description": "Enter sort",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "sort", "page", "pageSize"], [], []);
          return _this.coding.project.projectList(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : privateProjects
     description    : 私有项目列表
     query            : type,page,pageSize
     */

    Projects.prototype.privateProjects = function() {
      this.debug("Projects::privateProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.privateProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : privateProjects
     description    : 私有项目列表
     query            : type,page,pageSize
     */

    Projects.prototype.privateProjects = function() {
      this.debug("Projects::privateProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.privateProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : privateProjects
     description    : 私有项目列表
     query            : type,page,pageSize
     */

    Projects.prototype.privateProjects = function() {
      this.debug("Projects::privateProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.privateProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : privateProjects
     description    : 私有项目列表
     query            : type,page,pageSize
     */

    Projects.prototype.privateProjects = function() {
      this.debug("Projects::privateProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.privateProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : options
     summary         : privateProjects
     description    : 私有项目列表
     query            : type,page,pageSize
     */

    Projects.prototype.privateProjects = function() {
      this.debug("Projects::privateProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.privateProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : patch
     summary         : privateProjects
     description    : 私有项目列表
     query            : type,page,pageSize
     */

    Projects.prototype.privateProjects = function() {
      this.debug("Projects::privateProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.privateProjects(params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : createProject
     description    : 创建项目
     path            : user
     formData        : name,description,type,gitEnabled,gitIgnore,gitReadmeEnabled,gitLicense,importFrom,vcsType,icon
     */

    Projects.prototype.createProject = function(user) {
      this.debug("Projects::createProject()");
      return this.prompt.get([
        {
          "name": "name",
          "description": "Enter name",
          "type": "string",
          "required": false
        }, {
          "name": "description",
          "description": "Enter description",
          "type": "string",
          "required": false
        }, {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "gitEnabled",
          "description": "Enter gitEnabled",
          "type": "string",
          "required": false
        }, {
          "name": "gitIgnore",
          "description": "Enter gitIgnore",
          "type": "string",
          "required": false
        }, {
          "name": "gitReadmeEnabled",
          "description": "Enter gitReadmeEnabled",
          "type": "string",
          "required": false
        }, {
          "name": "gitLicense",
          "description": "Enter gitLicense",
          "type": "string",
          "required": false
        }, {
          "name": "importFrom",
          "description": "Enter importFrom",
          "type": "string",
          "required": false
        }, {
          "name": "vcsType",
          "description": "Enter vcsType",
          "type": "string",
          "required": false
        }, {
          "name": "icon",
          "description": "Enter icon",
          "type": "file",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], [], [], ["name", "description", "type", "gitEnabled", "gitIgnore", "gitReadmeEnabled", "gitLicense", "importFrom", "vcsType", "icon"]);
          return _this.coding.project.createProject(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : publicProjects
     description    : 公有项目列表
     path            : user
     query            : type,page,pageSize
     */

    Projects.prototype.publicProjects = function(user) {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : publicProjects
     description    : 公有项目列表
     path            : user
     query            : type,page,pageSize
     */

    Projects.prototype.publicProjects = function(user) {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : put
     summary         : publicProjects
     description    : 公有项目列表
     path            : user
     query            : type,page,pageSize
     */

    Projects.prototype.publicProjects = function(user) {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : delete
     summary         : publicProjects
     description    : 公有项目列表
     path            : user
     query            : type,page,pageSize
     */

    Projects.prototype.publicProjects = function(user) {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : options
     summary         : publicProjects
     description    : 公有项目列表
     path            : user
     query            : type,page,pageSize
     */

    Projects.prototype.publicProjects = function(user) {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : patch
     summary         : publicProjects
     description    : 公有项目列表
     path            : user
     query            : type,page,pageSize
     */

    Projects.prototype.publicProjects = function(user) {
      this.debug("Projects::publicProjects()");
      return this.prompt.get([
        {
          "name": "type",
          "description": "Enter type",
          "type": "string",
          "required": false
        }, {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["type", "page", "pageSize"], [], []);
          return _this.coding.project.publicProjects(user, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return Projects;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Projects(cmd);
  };

}).call(this);
