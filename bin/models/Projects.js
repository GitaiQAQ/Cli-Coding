// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Projects,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Projects = (function(superClass) {
    extend(Projects, superClass);

    function Projects() {
      this.public_projects = bind(this.public_projects, this);
      this.createProject = bind(this.createProject, this);
      this.private_projects = bind(this.private_projects, this);
      this.project_list = bind(this.project_list, this);
      this.watchers = bind(this.watchers, this);
      this.watched = bind(this.watched, this);
      this.watch = bind(this.watch, this);
      this.visitProject = bind(this.visitProject, this);
      this.unwatch = bind(this.unwatch, this);
      this.unstar = bind(this.unstar, this);
      this.stared = bind(this.stared, this);
      this.star = bind(this.star, this);
      this.setProjectIcon = bind(this.setProjectIcon, this);
      this.queryByName = bind(this.queryByName, this);
      this.publicProject = bind(this.publicProject, this);
      this.recommendedList = bind(this.recommendedList, this);
      this.update_1 = bind(this.update_1, this);
      this.getPinProjects = bind(this.getPinProjects, this);
      this.init = bind(this.init, this);
      return Projects.__super__.constructor.apply(this, arguments);
    }

    Projects.prototype.init = function() {
      this.debug("init()");
      this.program.command("getPinProjects").description("获取常用项目列表").action(this.getPinProjects);
      this.program.command("update_1").description("更新项目信息").action(this.update_1);
      this.program.command("recommendedList").description("推荐项目list").action(this.recommendedList);
      this.program.command("publicProject").description("公有项目列表").action(this.publicProject);
      this.program.command("queryByName").description("通过名称查询")["arguments"]('<user> <project>').action(this.queryByName);
      this.program.command("setProjectIcon").description("设置项目图标")["arguments"]('<user> <project>').action(this.setProjectIcon);
      this.program.command("star").description("收藏项目")["arguments"]('<user> <project>').action(this.star);
      this.program.command("stared").description("项目是否被收藏")["arguments"]('<user> <project>').action(this.stared);
      this.program.command("unstar").description("项目取消收藏")["arguments"]('<user> <project>').action(this.unstar);
      this.program.command("unwatch").description("项目取消关注")["arguments"]('<user> <project>').action(this.unwatch);
      this.program.command("visitProject").description("更新项目阅读时间")["arguments"]('<user> <project>').action(this.visitProject);
      this.program.command("watch").description("关注项目")["arguments"]('<user> <project>').action(this.watch);
      this.program.command("watched").description("项目是否被关注")["arguments"]('<user> <project>').action(this.watched);
      this.program.command("watchers").description("项目关注者")["arguments"]('<user> <project>').action(this.watchers);
      this.program.command("project_list").description("我的项目列表").action(this.project_list);
      this.program.command("private_projects").description("私有项目列表").action(this.private_projects);
      this.program.command("createProject").description("创建项目")["arguments"]('<global_key>').action(this.createProject);
      return this.program.command("public_projects").description("公有项目列表")["arguments"]('<global_key>').action(this.public_projects);
    };


    /*
    
     operationId  : getPinProjects
     description  : 获取常用项目列表
     args     	: 
     params 		: page,pageSize,page,pageSize,
     */

    Projects.prototype.getPinProjects = function() {
      this.debug("getPinProjects()");
      return this.coding.projects.getPinProjects(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : update_1
     description  : 更新项目信息
     args     	: 
     params 		: id,name,description,id,name,description,
     */

    Projects.prototype.update_1 = function() {
      this.debug("update_1()");
      return this.coding.projects.update_1(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : recommendedList
     description  : 推荐项目list
     args     	: 
     params 		:
     */

    Projects.prototype.recommendedList = function() {
      this.debug("recommendedList()");
      return this.coding.projects.recommendedList(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : publicProject
     description  : 公有项目列表
     args     	: 
     params 		: page,pageSize,page,pageSize,
     */

    Projects.prototype.publicProject = function() {
      this.debug("publicProject()");
      return this.coding.projects.publicProject(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : queryByName
     description  : 通过名称查询
     args     	: user,project
     params 		:
     */

    Projects.prototype.queryByName = function(user, project) {
      this.debug("queryByName()");
      return this.coding.projects.queryByName(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : setProjectIcon
     description  : 设置项目图标
     args     	: user,project
     params 		:
     */

    Projects.prototype.setProjectIcon = function(user, project) {
      this.debug("setProjectIcon()");
      return this.coding.projects.setProjectIcon(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : star
     description  : 收藏项目
     args     	: user,project
     params 		:
     */

    Projects.prototype.star = function(user, project) {
      this.debug("star()");
      return this.coding.projects.star(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : stared
     description  : 项目是否被收藏
     args     	: user,project
     params 		:
     */

    Projects.prototype.stared = function(user, project) {
      this.debug("stared()");
      return this.coding.projects.stared(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : unstar
     description  : 项目取消收藏
     args     	: user,project
     params 		:
     */

    Projects.prototype.unstar = function(user, project) {
      this.debug("unstar()");
      return this.coding.projects.unstar(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : unwatch
     description  : 项目取消关注
     args     	: user,project
     params 		:
     */

    Projects.prototype.unwatch = function(user, project) {
      this.debug("unwatch()");
      return this.coding.projects.unwatch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : visitProject
     description  : 更新项目阅读时间
     args     	: user,project
     params 		:
     */

    Projects.prototype.visitProject = function(user, project) {
      this.debug("visitProject()");
      return this.coding.projects.visitProject(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : watch
     description  : 关注项目
     args     	: user,project
     params 		:
     */

    Projects.prototype.watch = function(user, project) {
      this.debug("watch()");
      return this.coding.projects.watch(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : watched
     description  : 项目是否被关注
     args     	: user,project
     params 		:
     */

    Projects.prototype.watched = function(user, project) {
      this.debug("watched()");
      return this.coding.projects.watched(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : watchers
     description  : 项目关注者
     args     	: user,project
     params 		:
     */

    Projects.prototype.watchers = function(user, project) {
      this.debug("watchers()");
      return this.coding.projects.watchers(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : project_list
     description  : 我的项目列表
     args     	: 
     params 		: type,sort,page,pageSize,type,sort,page,pageSize,
     */

    Projects.prototype.project_list = function() {
      this.debug("project_list()");
      return this.coding.projects.project_list(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : private_projects
     description  : 私有项目列表
     args     	: 
     params 		: type,page,pageSize,type,page,pageSize,
     */

    Projects.prototype.private_projects = function() {
      this.debug("private_projects()");
      return this.coding.projects.private_projects(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : createProject
     description  : 创建项目
     args     	: global_key
     params 		:
     */

    Projects.prototype.createProject = function(global_key) {
      this.debug("createProject()");
      return this.coding.projects.createProject(global_key, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : public_projects
     description  : 公有项目列表
     args     	: global_key
     params 		: type,page,pageSize,type,page,pageSize,
     */

    Projects.prototype.public_projects = function(global_key) {
      this.debug("public_projects()");
      return this.coding.projects.public_projects(global_key, params, function(data) {
        return console.log(data);
      });
    };

    return Projects;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Projects(cmd);
  };

}).call(this);
