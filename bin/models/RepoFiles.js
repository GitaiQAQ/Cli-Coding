// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, RepoFiles,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  RepoFiles = (function(superClass) {
    extend(RepoFiles, superClass);

    function RepoFiles() {
      this.create = bind(this.create, this);
      this.update = bind(this.update, this);
      this.del = bind(this.del, this);
      this.init = bind(this.init, this);
      return RepoFiles.__super__.constructor.apply(this, arguments);
    }

    RepoFiles.prototype.init = function() {
      this.debug("init()");
      this.program.command("del").description("删除文件")["arguments"]("<user> <project> <file>").action(this.del);
      this.program.command("update").description("更新文件")["arguments"]("<user> <project> <file>").action(this.update);
      return this.program.command("create").description("新建文件")["arguments"]("<user> <project> <file>").action(this.create);
    };


    /*
    
     method            : get
     summary         : del
     description    : 删除文件
     path            : user,project,file
     body            : ref,path
     */

    RepoFiles.prototype.del = function(user, project, file) {
      this.debug("RepoFiles::del()");
      return this.prompt.get([
        {
          "name": "ref",
          "description": "Enter ref",
          "type": "string",
          "required": false
        }, {
          "name": "path",
          "description": "Enter path",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.repoFile.del(user, project, file, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : update
     description    : 更新文件
     path            : user,project,file
     body            : ref,path
     */

    RepoFiles.prototype.update = function(user, project, file) {
      this.debug("RepoFiles::update()");
      return this.prompt.get([
        {
          "name": "ref",
          "description": "Enter ref",
          "type": "string",
          "required": false
        }, {
          "name": "path",
          "description": "Enter path",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.repoFile.update(user, project, file, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : get
     summary         : create
     description    : 新建文件
     path            : user,project,file
     body            : ref,path
     */

    RepoFiles.prototype.create = function(user, project, file) {
      this.debug("RepoFiles::create()");
      return this.prompt.get([
        {
          "name": "ref",
          "description": "Enter ref",
          "type": "string",
          "required": false
        }, {
          "name": "path",
          "description": "Enter path",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          return _this.coding.repoFile.create(user, project, file, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return RepoFiles;

  })(BaseModel);

  module.exports = function(cmd) {
    return new RepoFiles(cmd);
  };

}).call(this);
