// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Tags,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Tags = (function(superClass) {
    extend(Tags, superClass);

    function Tags() {
      this.del = bind(this.del, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      this.init = bind(this.init, this);
      return Tags.__super__.constructor.apply(this, arguments);
    }

    Tags.prototype.init = function() {
      this.debug("init()");
      this.program.command("list").description("标签列表")["arguments"]("<user> <project>").action(this.list);
      this.program.command("create").description("创建标签")["arguments"]("<user> <project>").action(this.create);
      return this.program.command("del").description("删除标签")["arguments"]("<user> <project>").action(this.del);
    };


    /*
    
     method            : get
     summary         : list
     description    : 标签列表
     path            : user,project
     query            : page,pageSize
     */

    Tags.prototype.list = function(user, project) {
      this.debug("Tags::list()");
      return this.prompt.get([
        {
          "name": "page",
          "description": "Enter page",
          "type": "integer",
          "required": false
        }, {
          "name": "pageSize",
          "description": "Enter pageSize",
          "type": "integer",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["page", "pageSize"], [], []);
          return _this.coding.tag.list(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : create
     description    : 创建标签
     path            : user,project
     query            : tag_name,tag_point,message
     */

    Tags.prototype.create = function(user, project) {
      this.debug("Tags::create()");
      return this.prompt.get([
        {
          "name": "tag_name",
          "description": "Enter tag_name",
          "type": "string",
          "required": true
        }, {
          "name": "tag_point",
          "description": "Enter tag_point",
          "type": "string",
          "required": false
        }, {
          "name": "message",
          "description": "Enter message",
          "type": "string",
          "required": false
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["tag_name", "tag_point", "message"], [], []);
          return _this.coding.tag.create(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };


    /*
    
     method            : post
     summary         : del
     description    : 删除标签
     path            : user,project
     query            : tag_name
     */

    Tags.prototype.del = function(user, project) {
      this.debug("Tags::del()");
      return this.prompt.get([
        {
          "name": "tag_name",
          "description": "Enter tag_name",
          "type": "string",
          "required": true
        }
      ], (function(_this) {
        return function(err, params) {
          if (err) {
            return err;
          }
          params = _this.parseParames(params, [], ["tag_name"], [], []);
          return _this.coding.tag.del(user, project, params, function(data) {
            return _this.showData(data);
          });
        };
      })(this));
    };

    return Tags;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Tags(cmd);
  };

}).call(this);
