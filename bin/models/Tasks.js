// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Tasks,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Tasks = (function(superClass) {
    extend(Tasks, superClass);

    function Tasks() {
      this.userTasks = bind(this.userTasks, this);
      this.list_5 = bind(this.list_5, this);
      this.userTasksOfProject = bind(this.userTasksOfProject, this);
      this.getTaskByLabel = bind(this.getTaskByLabel, this);
      this.userTasksCountInProject = bind(this.userTasksCountInProject, this);
      this.userTasksCount = bind(this.userTasksCount, this);
      this.pageTaskWatchers = bind(this.pageTaskWatchers, this);
      this.watch_2 = bind(this.watch_2, this);
      this.updateStatus = bind(this.updateStatus, this);
      this.updatePriority = bind(this.updatePriority, this);
      this.updateOwner = bind(this.updateOwner, this);
      this.operateTaskLabels = bind(this.operateTaskLabels, this);
      this.addTaskLabel = bind(this.addTaskLabel, this);
      this.getDescription = bind(this.getDescription, this);
      this.updateDeadline = bind(this.updateDeadline, this);
      this.updateContent = bind(this.updateContent, this);
      this.getComments = bind(this.getComments, this);
      this.deleteComment = bind(this.deleteComment, this);
      this.pubComment = bind(this.pubComment, this);
      this.update4client = bind(this.update4client, this);
      this.taskCountByUser = bind(this.taskCountByUser, this);
      this.taskCreating = bind(this.taskCreating, this);
      this.listOfOwner = bind(this.listOfOwner, this);
      this.getTask = bind(this.getTask, this);
      this.create = bind(this.create, this);
      this.init = bind(this.init, this);
      return Tasks.__super__.constructor.apply(this, arguments);
    }

    Tasks.prototype.init = function() {
      this.debug("init()");
      this.program.command("create").description("创建任务")["arguments"]('<project>').action(this.create);
      this.program.command("getTask").description("创建任务")["arguments"]('<project> <id>').action(this.getTask);
      this.program.command("listOfOwner").description("列出某人的任务列表")["arguments"]('<project> <owner> <status>').action(this.listOfOwner);
      this.program.command("taskCreating").description("全局任务创建").action(this.taskCreating);
      this.program.command("taskCountByUser").description("任务统计信息")["arguments"]('<user> <project>').action(this.taskCountByUser);
      this.program.command("update4client").description("修改任务")["arguments"]('<user> <project> <id>').action(this.update4client);
      this.program.command("pubComment").description("创建任务评论")["arguments"]('<user> <project> <id>').action(this.pubComment);
      this.program.command("deleteComment").description("删除任务评论")["arguments"]('<user> <project> <id> <commentId>').action(this.deleteComment);
      this.program.command("getComments").description("获取任务评论")["arguments"]('<user> <project> <id>').action(this.getComments);
      this.program.command("updateContent").description("修改任务内容")["arguments"]('<user> <project> <id>').action(this.updateContent);
      this.program.command("updateDeadline").description("修改任务截止日期")["arguments"]('<user> <project> <id>').action(this.updateDeadline);
      this.program.command("getDescription").description("获取任务描述")["arguments"]('<user> <project> <id>').action(this.getDescription);
      this.program.command("addTaskLabel").description("添加任务标签")["arguments"]('<user> <project> <id> <labelId>').action(this.addTaskLabel);
      this.program.command("operateTaskLabels").description("批量操作任务标签")["arguments"]('<user> <project> <id>').action(this.operateTaskLabels);
      this.program.command("updateOwner").description("修改任务执行者")["arguments"]('<user> <project> <id>').action(this.updateOwner);
      this.program.command("updatePriority").description("修改任务优先级")["arguments"]('<user> <project> <id>').action(this.updatePriority);
      this.program.command("updateStatus").description("修改任务状态")["arguments"]('<user> <project> <id>').action(this.updateStatus);
      this.program.command("watch_2").description("关注任务")["arguments"]('<user> <project> <id>').action(this.watch_2);
      this.program.command("pageTaskWatchers").description("关注该任务的用户")["arguments"]('<user> <project> <id>').action(this.pageTaskWatchers);
      this.program.command("userTasksCount").description(" 获取当前用户项目的已完成、正在进行的、关注的数值")["arguments"]('<user> <project>').action(this.userTasksCount);
      this.program.command("userTasksCountInProject").description("统计所有 已完成 和 正在处理 的任务数")["arguments"]('<user> <project>').action(this.userTasksCountInProject);
      this.program.command("getTaskByLabel").description("查询标签下的任务列表")["arguments"]('<user> <project> <id>').action(this.getTaskByLabel);
      this.program.command("userTasksOfProject").description("列出当前用户某项目某状态的任务列表")["arguments"]('<user> <project> <status>').action(this.userTasksOfProject);
      this.program.command("list_5").description("任务列表")["arguments"]('<user> <project> <status>').action(this.list_5);
      return this.program.command("userTasks").description("当前用户某状态的任务列表")["arguments"]('<user> <status>').action(this.userTasks);
    };


    /*
    
     operationId  : create
     description  : 创建任务
     args     	: project
     params 		: owner_id,priority,deadline,description,content,labels,watchers,owner_id,priority,deadline,description,content,labels,watchers,
     */

    Tasks.prototype.create = function(project) {
      this.debug("create()");
      return this.coding.tasks.create(project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getTask
     description  : 创建任务
     args     	: project,id
     params 		: parseDescription,parseDescription,
     */

    Tasks.prototype.getTask = function(project, id) {
      this.debug("getTask()");
      return this.coding.tasks.getTask(project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : listOfOwner
     description  : 列出某人的任务列表
     args     	: project,owner,status
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.listOfOwner = function(project, owner, status) {
      this.debug("listOfOwner()");
      return this.coding.tasks.listOfOwner(project, owner, status, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : taskCreating
     description  : 全局任务创建
     args     	: 
     params 		:
     */

    Tasks.prototype.taskCreating = function() {
      this.debug("taskCreating()");
      return this.coding.tasks.taskCreating(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : taskCountByUser
     description  : 任务统计信息
     args     	: user,project
     params 		:
     */

    Tasks.prototype.taskCountByUser = function(user, project) {
      this.debug("taskCountByUser()");
      return this.coding.tasks.taskCountByUser(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : update4client
     description  : 修改任务
     args     	: user,project,id
     params 		: status,priority,id,owner_id,deadline,description,content,status,priority,id,owner_id,deadline,description,content,
     */

    Tasks.prototype.update4client = function(user, project, id) {
      this.debug("update4client()");
      return this.coding.tasks.update4client(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : pubComment
     description  : 创建任务评论
     args     	: user,project,id
     params 		:
     */

    Tasks.prototype.pubComment = function(user, project, id) {
      this.debug("pubComment()");
      return this.coding.tasks.pubComment(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : deleteComment
     description  : 删除任务评论
     args     	: user,project,id,commentId
     params 		:
     */

    Tasks.prototype.deleteComment = function(user, project, id, commentId) {
      this.debug("deleteComment()");
      return this.coding.tasks.deleteComment(user, project, id, commentId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getComments
     description  : 获取任务评论
     args     	: user,project,id
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.getComments = function(user, project, id) {
      this.debug("getComments()");
      return this.coding.tasks.getComments(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateContent
     description  : 修改任务内容
     args     	: user,project,id
     params 		: content,id,content,id,
     */

    Tasks.prototype.updateContent = function(user, project, id) {
      this.debug("updateContent()");
      return this.coding.tasks.updateContent(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateDeadline
     description  : 修改任务截止日期
     args     	: user,project,id
     params 		: deadline,id,deadline,id,
     */

    Tasks.prototype.updateDeadline = function(user, project, id) {
      this.debug("updateDeadline()");
      return this.coding.tasks.updateDeadline(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getDescription
     description  : 获取任务描述
     args     	: user,project,id
     params 		:
     */

    Tasks.prototype.getDescription = function(user, project, id) {
      this.debug("getDescription()");
      return this.coding.tasks.getDescription(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : addTaskLabel
     description  : 添加任务标签
     args     	: user,project,id,labelId
     params 		:
     */

    Tasks.prototype.addTaskLabel = function(user, project, id, labelId) {
      this.debug("addTaskLabel()");
      return this.coding.tasks.addTaskLabel(user, project, id, labelId, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : operateTaskLabels
     description  : 批量操作任务标签
     args     	: user,project,id
     params 		: label_id,label_id,
     */

    Tasks.prototype.operateTaskLabels = function(user, project, id) {
      this.debug("operateTaskLabels()");
      return this.coding.tasks.operateTaskLabels(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateOwner
     description  : 修改任务执行者
     args     	: user,project,id
     params 		: owner_id,id,owner_id,id,
     */

    Tasks.prototype.updateOwner = function(user, project, id) {
      this.debug("updateOwner()");
      return this.coding.tasks.updateOwner(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updatePriority
     description  : 修改任务优先级
     args     	: user,project,id
     params 		: priority,id,priority,id,
     */

    Tasks.prototype.updatePriority = function(user, project, id) {
      this.debug("updatePriority()");
      return this.coding.tasks.updatePriority(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateStatus
     description  : 修改任务状态
     args     	: user,project,id
     params 		: status,id,status,id,
     */

    Tasks.prototype.updateStatus = function(user, project, id) {
      this.debug("updateStatus()");
      return this.coding.tasks.updateStatus(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : watch_2
     description  : 关注任务
     args     	: user,project,id
     params 		:
     */

    Tasks.prototype.watch_2 = function(user, project, id) {
      this.debug("watch_2()");
      return this.coding.tasks.watch_2(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : pageTaskWatchers
     description  : 关注该任务的用户
     args     	: user,project,id
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.pageTaskWatchers = function(user, project, id) {
      this.debug("pageTaskWatchers()");
      return this.coding.tasks.pageTaskWatchers(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : userTasksCount
     description  :  获取当前用户项目的已完成、正在进行的、关注的数值
     args     	: user,project
     params 		:
     */

    Tasks.prototype.userTasksCount = function(user, project) {
      this.debug("userTasksCount()");
      return this.coding.tasks.userTasksCount(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : userTasksCountInProject
     description  : 统计所有 已完成 和 正在处理 的任务数
     args     	: user,project
     params 		:
     */

    Tasks.prototype.userTasksCountInProject = function(user, project) {
      this.debug("userTasksCountInProject()");
      return this.coding.tasks.userTasksCountInProject(user, project, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getTaskByLabel
     description  : 查询标签下的任务列表
     args     	: user,project,id
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.getTaskByLabel = function(user, project, id) {
      this.debug("getTaskByLabel()");
      return this.coding.tasks.getTaskByLabel(user, project, id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : userTasksOfProject
     description  : 列出当前用户某项目某状态的任务列表
     args     	: user,project,status
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.userTasksOfProject = function(user, project, status) {
      this.debug("userTasksOfProject()");
      return this.coding.tasks.userTasksOfProject(user, project, status, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : list_5
     description  : 任务列表
     args     	: user,project,status
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.list_5 = function(user, project, status) {
      this.debug("list_5()");
      return this.coding.tasks.list_5(user, project, status, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : userTasks
     description  : 当前用户某状态的任务列表
     args     	: user,status
     params 		: page,pageSize,page,pageSize,
     */

    Tasks.prototype.userTasks = function(user, status) {
      this.debug("userTasks()");
      return this.coding.tasks.userTasks(user, status, params, function(data) {
        return console.log(data);
      });
    };

    return Tasks;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Tasks(cmd);
  };

}).call(this);
