// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Trees,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Trees = (function(superClass) {
    extend(Trees, superClass);

    function Trees() {
      this.tree = bind(this.tree, this);
      this.init = bind(this.init, this);
      return Trees.__super__.constructor.apply(this, arguments);
    }

    Trees.prototype.init = function() {
      this.debug("init()");
      return this.program.command("tree").description("目录")["arguments"]('<user> <project> <tree>').action(this.tree);
    };


    /*
    
     operationId  : tree
     description  : 目录
     args     	: user,project,tree
     params 		:
     */

    Trees.prototype.tree = function(user, project, tree) {
      this.debug("tree()");
      return this.coding.trees.tree(user, project, tree, params, function(data) {
        return console.log(data);
      });
    };

    return Trees;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Trees(cmd);
  };

}).call(this);
