// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Tweets,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Tweets = (function(superClass) {
    extend(Tweets, superClass);

    function Tweets() {
      this.public_tweets = bind(this.public_tweets, this);
      this.unlike_tweet = bind(this.unlike_tweet, this);
      this.getTweetLike = bind(this.getTweetLike, this);
      this.like_tweet = bind(this.like_tweet, this);
      this.deleteTweet = bind(this.deleteTweet, this);
      this.query_comment = bind(this.query_comment, this);
      this.delete_comment = bind(this.delete_comment, this);
      this.comment = bind(this.comment, this);
      this.detail = bind(this.detail, this);
      this.user_public = bind(this.user_public, this);
      this.public_tweets = bind(this.public_tweets, this);
      this.lastTweet = bind(this.lastTweet, this);
      this.insert_image = bind(this.insert_image, this);
      this.query_a_comment = bind(this.query_a_comment, this);
      this.bestUser = bind(this.bestUser, this);
      this.create_1 = bind(this.create_1, this);
      this.init = bind(this.init, this);
      return Tweets.__super__.constructor.apply(this, arguments);
    }

    Tweets.prototype.init = function() {
      this.debug("init()");
      this.program.command("create_1").description("发送冒泡").action(this.create_1);
      this.program.command("bestUser").description("热门用户").action(this.bestUser);
      this.program.command("query_a_comment").description("获取某个评论")["arguments"]('<id>').action(this.query_a_comment);
      this.program.command("insert_image").description("冒泡插入图片").action(this.insert_image);
      this.program.command("lastTweet").description("查询last_id以后的最新冒泡").action(this.lastTweet);
      this.program.command("public_tweets").description("冒泡列表").action(this.public_tweets);
      this.program.command("user_public").description("用户冒泡列表").action(this.user_public);
      this.program.command("detail").description("获取冒泡详情")["arguments"]('<global_key> <tweet_id>').action(this.detail);
      this.program.command("comment").description("冒泡评论")["arguments"]('<id>').action(this.comment);
      this.program.command("delete_comment").description("删除冒泡评论")["arguments"]('<id> <comment_id>').action(this.delete_comment);
      this.program.command("query_comment").description("获取冒泡评论列表")["arguments"]('<id>').action(this.query_comment);
      this.program.command("deleteTweet").description("删除冒泡")["arguments"]('<tweet_id>').action(this.deleteTweet);
      this.program.command("like_tweet").description("冒泡点赞")["arguments"]('<tweet_id>').action(this.like_tweet);
      this.program.command("getTweetLike").description("赞过的冒泡列表")["arguments"]('<tweet_id>').action(this.getTweetLike);
      this.program.command("unlike_tweet").description("冒泡取消点赞")["arguments"]('<tweet_id>').action(this.unlike_tweet);
      return this.program.command("public_tweets").description("冒泡广场列表").action(this.public_tweets);
    };


    /*
    
     operationId  : create_1
     description  : 发送冒泡
     args     	: 
     params 		: device,location,coord,address,content,device,location,coord,address,content,
     */

    Tweets.prototype.create_1 = function() {
      this.debug("create_1()");
      return this.coding.tweets.create_1(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : bestUser
     description  : 热门用户
     args     	: 
     params 		:
     */

    Tweets.prototype.bestUser = function() {
      this.debug("bestUser()");
      return this.coding.tweets.bestUser(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : query_a_comment
     description  : 获取某个评论
     args     	: id
     params 		:
     */

    Tweets.prototype.query_a_comment = function(id) {
      this.debug("query_a_comment()");
      return this.coding.tweets.query_a_comment(id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : insert_image
     description  : 冒泡插入图片
     args     	: 
     params 		:
     */

    Tweets.prototype.insert_image = function() {
      this.debug("insert_image()");
      return this.coding.tweets.insert_image(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : lastTweet
     description  : 查询last_id以后的最新冒泡
     args     	: 
     params 		: default_like_count,last_id,default_like_count,last_id,
     */

    Tweets.prototype.lastTweet = function() {
      this.debug("lastTweet()");
      return this.coding.tweets.lastTweet(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : public_tweets
     description  : 冒泡列表
     args     	: 
     params 		: sort,last_id,default_like_count,filter,sort,last_id,default_like_count,filter,
     */

    Tweets.prototype.public_tweets = function() {
      this.debug("public_tweets()");
      return this.coding.tweets.public_tweets(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : user_public
     description  : 用户冒泡列表
     args     	: 
     params 		: last_id,user_id,global_key,type,default_like_count,last_id,user_id,global_key,type,default_like_count,
     */

    Tweets.prototype.user_public = function() {
      this.debug("user_public()");
      return this.coding.tweets.user_public(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : detail
     description  : 获取冒泡详情
     args     	: global_key,tweet_id
     params 		: default_like_count,default_like_count,
     */

    Tweets.prototype.detail = function(global_key, tweet_id) {
      this.debug("detail()");
      return this.coding.tweets.detail(global_key, tweet_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : comment
     description  : 冒泡评论
     args     	: id
     params 		: content,afterFilter,content,afterFilter,
     */

    Tweets.prototype.comment = function(id) {
      this.debug("comment()");
      return this.coding.tweets.comment(id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : delete_comment
     description  : 删除冒泡评论
     args     	: id,comment_id
     params 		:
     */

    Tweets.prototype.delete_comment = function(id, comment_id) {
      this.debug("delete_comment()");
      return this.coding.tweets.delete_comment(id, comment_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : query_comment
     description  : 获取冒泡评论列表
     args     	: id
     params 		: page,pageSize,page,pageSize,
     */

    Tweets.prototype.query_comment = function(id) {
      this.debug("query_comment()");
      return this.coding.tweets.query_comment(id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : deleteTweet
     description  : 删除冒泡
     args     	: tweet_id
     params 		:
     */

    Tweets.prototype.deleteTweet = function(tweet_id) {
      this.debug("deleteTweet()");
      return this.coding.tweets.deleteTweet(tweet_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : like_tweet
     description  : 冒泡点赞
     args     	: tweet_id
     params 		:
     */

    Tweets.prototype.like_tweet = function(tweet_id) {
      this.debug("like_tweet()");
      return this.coding.tweets.like_tweet(tweet_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getTweetLike
     description  : 赞过的冒泡列表
     args     	: tweet_id
     params 		: page,pageSize,page,pageSize,
     */

    Tweets.prototype.getTweetLike = function(tweet_id) {
      this.debug("getTweetLike()");
      return this.coding.tweets.getTweetLike(tweet_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : unlike_tweet
     description  : 冒泡取消点赞
     args     	: tweet_id
     params 		:
     */

    Tweets.prototype.unlike_tweet = function(tweet_id) {
      this.debug("unlike_tweet()");
      return this.coding.tweets.unlike_tweet(tweet_id, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : public_tweets
     description  : 冒泡广场列表
     args     	: 
     params 		: sort,last_id,default_like_count,filter,sort,last_id,default_like_count,filter,
     */

    Tweets.prototype.public_tweets = function() {
      this.debug("public_tweets()");
      return this.coding.tweets.public_tweets(params, function(data) {
        return console.log(data);
      });
    };

    return Tweets;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Tweets(cmd);
  };

}).call(this);
