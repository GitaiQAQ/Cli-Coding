// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, Users,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('../BaseModel');

  Users = (function(superClass) {
    extend(Users, superClass);

    function Users() {
      this.unreadCount = bind(this.unreadCount, this);
      this.unfollow = bind(this.unfollow, this);
      this.search = bind(this.search, this);
      this.getRelationshipWithProjectMember = bind(this.getRelationshipWithProjectMember, this);
      this.getRelationship = bind(this.getRelationship, this);
      this.relationship = bind(this.relationship, this);
      this.friends = bind(this.friends, this);
      this.friends_1 = bind(this.friends_1, this);
      this.followers = bind(this.followers, this);
      this.followers_1 = bind(this.followers_1, this);
      this.follow = bind(this.follow, this);
      this.updateAvatar = bind(this.updateAvatar, this);
      this.updatePassword = bind(this.updatePassword, this);
      this.updateInfo = bind(this.updateInfo, this);
      this.doPhoneRegister = bind(this.doPhoneRegister, this);
      this.generateRegisterPhoneCode = bind(this.generateRegisterPhoneCode, this);
      this.doRegister = bind(this.doRegister, this);
      this.getUserByName = bind(this.getUserByName, this);
      this.doLogout = bind(this.doLogout, this);
      this.doPhoneLogin = bind(this.doPhoneLogin, this);
      this.generateLoginPhoneCode = bind(this.generateLoginPhoneCode, this);
      this.doLogin = bind(this.doLogin, this);
      this.getUserByGlobalKey = bind(this.getUserByGlobalKey, this);
      this.getGravatar = bind(this.getGravatar, this);
      this.getNotificationSettings = bind(this.getNotificationSettings, this);
      this.userEmail = bind(this.userEmail, this);
      this.currentUser = bind(this.currentUser, this);
      this.checkTwoFactorAuthCode = bind(this.checkTwoFactorAuthCode, this);
      this.checkPhone = bind(this.checkPhone, this);
      this.check = bind(this.check, this);
      this.changeNotificationSetting = bind(this.changeNotificationSetting, this);
      this.captcha = bind(this.captcha, this);
      this.getAvatar = bind(this.getAvatar, this);
      this.activatePhone = bind(this.activatePhone, this);
      this.generateActivatePhoneCode = bind(this.generateActivatePhoneCode, this);
      this.doActivate = bind(this.doActivate, this);
      this.init = bind(this.init, this);
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.init = function() {
      this.debug("init()");
      this.program.command("doActivate").description("账户激活").action(this.doActivate);
      this.program.command("generateActivatePhoneCode").description("获取激活账号的手机验证码").action(this.generateActivatePhoneCode);
      this.program.command("activatePhone").description("激活用手机注册的用户").action(this.activatePhone);
      this.program.command("getAvatar").description("获取头像").action(this.getAvatar);
      this.program.command("captcha").description("检查是否需要验证码")["arguments"]('<action>').action(this.captcha);
      this.program.command("changeNotificationSetting").description("修改通知设置").action(this.changeNotificationSetting);
      this.program.command("check").description("检查email是否没有被注册过").action(this.check);
      this.program.command("checkPhone").description("检查手机是否没有被注册过").action(this.checkPhone);
      this.program.command("checkTwoFactorAuthCode").description("登录时的两步验证").action(this.checkTwoFactorAuthCode);
      this.program.command("currentUser").description("获取当前登录用户信息").action(this.currentUser);
      this.program.command("userEmail").description("获取当前用户的email").action(this.userEmail);
      this.program.command("getNotificationSettings").description("获取通知设置").action(this.getNotificationSettings);
      this.program.command("getGravatar").description("获取Gravatar头像").action(this.getGravatar);
      this.program.command("getUserByGlobalKey").description("通过个性后缀获取用户信息")["arguments"]('<global_key>').action(this.getUserByGlobalKey);
      this.program.command("doLogin").description("登录").action(this.doLogin);
      this.program.command("generateLoginPhoneCode").description("获取登录的手机验证码").action(this.generateLoginPhoneCode);
      this.program.command("doPhoneLogin").description("使用绑定过的手机号码登录").action(this.doPhoneLogin);
      this.program.command("doLogout").description("注销登录").action(this.doLogout);
      this.program.command("getUserByName").description("通过昵称获取用户信息")["arguments"]('<name>').action(this.getUserByName);
      this.program.command("doRegister").description("注册").action(this.doRegister);
      this.program.command("generateRegisterPhoneCode").description("获取注册的手机验证码").action(this.generateRegisterPhoneCode);
      this.program.command("doPhoneRegister").description("使用手机注册").action(this.doPhoneRegister);
      this.program.command("updateInfo").description("更新用户信息").action(this.updateInfo);
      this.program.command("updatePassword").description("修改用户密码").action(this.updatePassword);
      this.program.command("updateAvatar").description("更新头像").action(this.updateAvatar);
      this.program.command("follow").description("关注用户").action(this.follow);
      this.program.command("followers_1").description("关注我的用户").action(this.followers_1);
      this.program.command("followers").description("获取关注默认的用户")["arguments"]('<global_key>').action(this.followers);
      this.program.command("friends_1").description("我关注的用户列表").action(this.friends_1);
      this.program.command("friends").description("指定用户的关注列表")["arguments"]('<global_key>').action(this.friends);
      this.program.command("relationship").description("是否关注了该用户")["arguments"]('<global_key>').action(this.relationship);
      this.program.command("getRelationship").description("获取我关注和关注我的用户列表").action(this.getRelationship);
      this.program.command("getRelationshipWithProjectMember").description("获取我关注和关注我的用户列表包含成员列表").action(this.getRelationshipWithProjectMember);
      this.program.command("search").description("搜索用户").action(this.search);
      this.program.command("unfollow").description("取消关注").action(this.unfollow);
      return this.program.command("unreadCount").description("未读消息通知").action(this.unreadCount);
    };


    /*
    
     operationId  : doActivate
     description  : 账户激活
     args     	: 
     params 		: email,key,password,confirm_password,email,key,password,confirm_password,
     */

    Users.prototype.doActivate = function() {
      this.debug("doActivate()");
      return this.coding.users.doActivate(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : generateActivatePhoneCode
     description  : 获取激活账号的手机验证码
     args     	: 
     params 		: phone,phone,
     */

    Users.prototype.generateActivatePhoneCode = function() {
      this.debug("generateActivatePhoneCode()");
      return this.coding.users.generateActivatePhoneCode(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : activatePhone
     description  : 激活用手机注册的用户
     args     	: 
     params 		: phone,code,global_key,email,password,phone,code,global_key,email,password,
     */

    Users.prototype.activatePhone = function() {
      this.debug("activatePhone()");
      return this.coding.users.activatePhone(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getAvatar
     description  : 获取头像
     args     	: 
     params 		:
     */

    Users.prototype.getAvatar = function() {
      this.debug("getAvatar()");
      return this.coding.users.getAvatar(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : captcha
     description  : 检查是否需要验证码
     args     	: action
     params 		:
     */

    Users.prototype.captcha = function(action) {
      this.debug("captcha()");
      return this.coding.users.captcha(action, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : changeNotificationSetting
     description  : 修改通知设置
     args     	: 
     params 		: settingType,settingContent,settingType,settingContent,
     */

    Users.prototype.changeNotificationSetting = function() {
      this.debug("changeNotificationSetting()");
      return this.coding.users.changeNotificationSetting(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : check
     description  : 检查email是否没有被注册过
     args     	: 
     params 		: key,key,
     */

    Users.prototype.check = function() {
      this.debug("check()");
      return this.coding.users.check(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : checkPhone
     description  : 检查手机是否没有被注册过
     args     	: 
     params 		: phone,phone,
     */

    Users.prototype.checkPhone = function() {
      this.debug("checkPhone()");
      return this.coding.users.checkPhone(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : checkTwoFactorAuthCode
     description  : 登录时的两步验证
     args     	: 
     params 		: code,code,
     */

    Users.prototype.checkTwoFactorAuthCode = function() {
      this.debug("checkTwoFactorAuthCode()");
      return this.coding.users.checkTwoFactorAuthCode(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : currentUser
     description  : 获取当前登录用户信息
     args     	: 
     params 		:
     */

    Users.prototype.currentUser = function() {
      this.debug("currentUser()");
      return this.coding.users.currentUser(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : userEmail
     description  : 获取当前用户的email
     args     	: 
     params 		:
     */

    Users.prototype.userEmail = function() {
      this.debug("userEmail()");
      return this.coding.users.userEmail(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getNotificationSettings
     description  : 获取通知设置
     args     	: 
     params 		:
     */

    Users.prototype.getNotificationSettings = function() {
      this.debug("getNotificationSettings()");
      return this.coding.users.getNotificationSettings(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getGravatar
     description  : 获取Gravatar头像
     args     	: 
     params 		:
     */

    Users.prototype.getGravatar = function() {
      this.debug("getGravatar()");
      return this.coding.users.getGravatar(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getUserByGlobalKey
     description  : 通过个性后缀获取用户信息
     args     	: global_key
     params 		:
     */

    Users.prototype.getUserByGlobalKey = function(global_key) {
      this.debug("getUserByGlobalKey()");
      return this.coding.users.getUserByGlobalKey(global_key, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : doLogin
     description  : 登录
     args     	: 
     params 		: email,password,j_captcha,remember_me,email,password,j_captcha,remember_me,
     */

    Users.prototype.doLogin = function() {
      this.debug("doLogin()");
      return this.coding.users.doLogin(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : generateLoginPhoneCode
     description  : 获取登录的手机验证码
     args     	: 
     params 		: phone,phone,
     */

    Users.prototype.generateLoginPhoneCode = function() {
      this.debug("generateLoginPhoneCode()");
      return this.coding.users.generateLoginPhoneCode(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : doPhoneLogin
     description  : 使用绑定过的手机号码登录
     args     	: 
     params 		: phone,code,j_captcha,remember_me,phone,code,j_captcha,remember_me,
     */

    Users.prototype.doPhoneLogin = function() {
      this.debug("doPhoneLogin()");
      return this.coding.users.doPhoneLogin(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : doLogout
     description  : 注销登录
     args     	: 
     params 		:
     */

    Users.prototype.doLogout = function() {
      this.debug("doLogout()");
      return this.coding.users.doLogout(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getUserByName
     description  : 通过昵称获取用户信息
     args     	: name
     params 		:
     */

    Users.prototype.getUserByName = function(name) {
      this.debug("getUserByName()");
      return this.coding.users.getUserByName(name, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : doRegister
     description  : 注册
     args     	: 
     params 		: email,global_key,j_captcha,email,global_key,j_captcha,
     */

    Users.prototype.doRegister = function() {
      this.debug("doRegister()");
      return this.coding.users.doRegister(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : generateRegisterPhoneCode
     description  : 获取注册的手机验证码
     args     	: 
     params 		: phone,phone,
     */

    Users.prototype.generateRegisterPhoneCode = function() {
      this.debug("generateRegisterPhoneCode()");
      return this.coding.users.generateRegisterPhoneCode(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : doPhoneRegister
     description  : 使用手机注册
     args     	: 
     params 		: phone,code,phone,code,
     */

    Users.prototype.doPhoneRegister = function() {
      this.debug("doPhoneRegister()");
      return this.coding.users.doPhoneRegister(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateInfo
     description  : 更新用户信息
     args     	: 
     params 		: tags,name,sex,phone,birthday,location,company,slogan,introduction,job,code,tags,name,sex,phone,birthday,location,company,slogan,introduction,job,code,
     */

    Users.prototype.updateInfo = function() {
      this.debug("updateInfo()");
      return this.coding.users.updateInfo(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updatePassword
     description  : 修改用户密码
     args     	: 
     params 		: current_password,password,confirm_password,current_password,password,confirm_password,
     */

    Users.prototype.updatePassword = function() {
      this.debug("updatePassword()");
      return this.coding.users.updatePassword(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : updateAvatar
     description  : 更新头像
     args     	: 
     params 		: avatar,avatar,
     */

    Users.prototype.updateAvatar = function() {
      this.debug("updateAvatar()");
      return this.coding.users.updateAvatar(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : follow
     description  : 关注用户
     args     	: 
     params 		: users,users,
     */

    Users.prototype.follow = function() {
      this.debug("follow()");
      return this.coding.users.follow(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : followers_1
     description  : 关注我的用户
     args     	: 
     params 		: page,pageSize,page,pageSize,
     */

    Users.prototype.followers_1 = function() {
      this.debug("followers_1()");
      return this.coding.users.followers_1(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : followers
     description  : 获取关注默认的用户
     args     	: global_key
     params 		: page,pageSize,page,pageSize,
     */

    Users.prototype.followers = function(global_key) {
      this.debug("followers()");
      return this.coding.users.followers(global_key, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : friends_1
     description  : 我关注的用户列表
     args     	: 
     params 		: page,pageSize,page,pageSize,
     */

    Users.prototype.friends_1 = function() {
      this.debug("friends_1()");
      return this.coding.users.friends_1(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : friends
     description  : 指定用户的关注列表
     args     	: global_key
     params 		: page,pageSize,page,pageSize,
     */

    Users.prototype.friends = function(global_key) {
      this.debug("friends()");
      return this.coding.users.friends(global_key, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : relationship
     description  : 是否关注了该用户
     args     	: global_key
     params 		:
     */

    Users.prototype.relationship = function(global_key) {
      this.debug("relationship()");
      return this.coding.users.relationship(global_key, params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getRelationship
     description  : 获取我关注和关注我的用户列表
     args     	: 
     params 		:
     */

    Users.prototype.getRelationship = function() {
      this.debug("getRelationship()");
      return this.coding.users.getRelationship(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : getRelationshipWithProjectMember
     description  : 获取我关注和关注我的用户列表包含成员列表
     args     	: 
     params 		: project_id,project_id,
     */

    Users.prototype.getRelationshipWithProjectMember = function() {
      this.debug("getRelationshipWithProjectMember()");
      return this.coding.users.getRelationshipWithProjectMember(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : search
     description  : 搜索用户
     args     	: 
     params 		: key,page,pageSize,key,page,pageSize,
     */

    Users.prototype.search = function() {
      this.debug("search()");
      return this.coding.users.search(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : unfollow
     description  : 取消关注
     args     	: 
     params 		: users,users,
     */

    Users.prototype.unfollow = function() {
      this.debug("unfollow()");
      return this.coding.users.unfollow(params, function(data) {
        return console.log(data);
      });
    };


    /*
    
     operationId  : unreadCount
     description  : 未读消息通知
     args     	: 
     params 		:
     */

    Users.prototype.unreadCount = function() {
      this.debug("unreadCount()");
      return this.coding.users.unreadCount(params, function(data) {
        return console.log(data);
      });
    };

    return Users;

  })(BaseModel);

  module.exports = function(cmd) {
    return new Users(cmd);
  };

}).call(this);
